{
    "collab_server" : "",
    "contents" : "#' Enrichment analysis using GREAT package\n#' to identify putative pathways of interest for further\n#' investigation\n#' @param peaks list, output of categAltrePeaks() function\n##' @param peaktype character, \"Experiment Specific\", \"Reference Specific\",\n##' \t\"Ambiguous\", \"Shared\", or \"All\" (All is default)\n#' @param species default hg19\n#' @param rule character, \"basalPlusExt\", \"twoClosest\", \"oneClosest\" rule that associates\n#' \tgenomic regions to genes (default is \"basalPlusExt\").\n#' \tSee https://bioconductor.org/packages/release/bioc/html/chipenrich.html for more detail.\n#' @param adv_upstream: kb, extension to upstream (if rule is basalPlusExt), default 5\n#' @param adv_downstream: kb, extension to downstream (if rule is basalPlusExt), default 1.0\n#' @param adv_span: kb, max extension (if rule is basalPlusExt), default 1000.0\n#' @param adv_twoDistance: kb, max extension (if rule is twoClosest), default 1000.0\n#' @param adv_oneDistance: kb, max extension (if rule is oneClosest), default 1000.0\n#' @param pathway_category: character, \"GO\", \"Pathway Data\", \"Regulatory Motifs\",\n#'\t\"Phenotype Data and Human Disease\", \"Gene Expression\", \"Gene Families\"\n#'\t(default is \"GO\")\n#'\n#' @examples\n#' \\dontrun{\n#' runGREAT(peaks=categaltre_peaks)\n#' }\n#' @return ways --\n#' pathways also annotated with additional information\n\n# run with categaltre_peaks\n\nrunGREAT <- function(peaks,\n#\tpeaktype=\"All\",\n\tspecies=\"hg19\",\n\trule=\"basalPlusExt\",\n\tadv_upstream=5.0,\n\tadv_downstream=1.0,\n\tadv_span=1000.0,\n\tadv_twoDistance=1000.0,\n\tadv_oneDistance=1000.0,\n\tpathway_category=\"GO\") {\n\n  # Check that peaktype entry is allowable and grab peaks for analysis\n#  if (is.na(match(peaktype,c(\"All\",\"Experiment Specific\", \"Shared\", \"Ambiguous\",\n#\t\"Reference Specific\")))) {\n#\tstop(\"peaktype should be either 'All', 'Experiment Specific', 'Shared',\n#\t\t'Ambiguous', or 'Reference Specific'\")\n#  }\n#  if (peaktype == \"All\") {\n#\tmypeaks = as.data.frame(peaks$analysisresults)[,c(\"chr\",\"start\",\"stop\")] }\n#  else {\n#\tmypeaks = as.data.frame(peaks$analysisresults)[which(peaks$analysisresults==peaktype),\n#\t\tc(\"chr\",\"start\",\"stop\")]}\n  if (is.na(match(rule, c(\"basalPlusExt\", \"twoClosest\", \"oneClosest\")))) {\n      stop(\"rule must be either 'basalPlusExt', 'twoClosest', 'oneClosest'\")\n  }\n\n  mygreat=list()\n  for (i in c(\"Experiment Specific\", \"Reference Specific\", \"Shared\")) {\n   print(paste(\"Running\",i))\n   mypeaks=as.data.frame(peaks$analysisresults)[which(peaks$analysisresults$REaltrecateg==i),\n               c(\"chr\",\"start\",\"stop\")]\n   ilabel=gsub(\" \",\"_\",i)\n    # Run GREAT\n      if (rule == \"basalPlusExt\") {\n  \tmygreat[[ilabel]]=rGREAT::submitGreatJob(mypeaks, species=species,adv_span=adv_span,\n\t    rule=\"basalPlusExt\", adv_upstream=adv_upstream,adv_downstream=adv_downstream,\n\t    request_interval=20)\n      }\n      if (rule==\"twoClosest\") {\n  \tmygreat[[ilabel]]=rGREAT::submitGreatJob(mypeaks, species=species,\n            rule=\"twoClosest\", adv_twoDistance=adv_twoDistance,request_interval=20)\n      }\n      if (rule==\"oneClosest\") {\n        mygreat[[ilabel]]=rGREAT::submitGreatJob(mypeaks, species=species,\n            rule=\"oneClosest\", adv_twoDistance=adv_oneDistance,request_interval=20)\n      }\n  } # end looping through peak types\n  return(mygreat)\n} # end function\n\n\n#' Enrichment analysis using GREAT package\n#' to identify putative pathways of interest for further\n#' investigation\n#'\n#' @param GREATpath output of runGREAT()\n#' @param pathway_category character, \"GO\", \"Pathway Data\", \"Regulatory Motifs\",\n#'      \"Phenotype Data and Human Disease\", \"Gene Expression\", \"Gene Families\"\n#'      (default is \"GO\")\n#' @param adjpvalcutoff: numeric, adjusted p-value cutoff to determine enriched pathways,\n#'\tdefault is 0.05\n#'\n#' @return list of dataframes for enriched pathways - each dataframe in the list\n#' represents one pathway type (e.g. \"GO MOlecular Function\")\n\nprocessPathways <- function(GREATpath,\n\tpathway_category=\"GO\",\n\tadjpvalcutoff=0.05) {\n\nfinaloutput=list()\n  for (job in names(GREATpath)) {\n    if(!is(GREATpath[[job]], \"GreatJob\")) {\n\tstop(\"GREATpath is not a list of 'GreatJob' objects.\n\t\tInput shoudl be the output of runGREAT()\")\n    }\n\n    output= rGREAT::getEnrichmentTables(GREATpath[[job]],category=pathway_category)\n    stats=data.frame(Pathway=names(output),NumSig_Binom=rep(NA,length(names(output))),\n\tNumSig_Hyper=rep(NA,length(names(output))))\n\n    for (i in names(output)) {\n\toutput[[i]]$Binom_adj_PValue=stats::p.adjust(output[[i]]$\"Binom_Raw_PValue\",method=\"fdr\")\n\toutput[[i]]$Hyper_adj_PValue=stats::p.adjust(output[[i]]$\"Hyper_Raw_PValue\",method=\"fdr\")\n\tkeepers=unique(c(which(output[[i]]$Binom_adj_PValue<=adjpvalcutoff),\n\t\twhich(output[[i]]$Hyper_adj_PValue<=adjpvalcutoff)))\n\toutput[[i]]=output[[i]][keepers,]\n\toutput[[i]]=output[[i]][base::order(output[[i]]$Binom_adj_PValue),]\n\tstats$NumSig_Binom[which(stats$Pathway==i)]=\n\t\tlength(which(output[[i]]$Binom_adj_PValue<=adjpvalcutoff))\n\tstats$NumSig_Hyper[which(stats$Pathway==i)]=\n\t\tlength(which(output[[i]]$Hyper_adj_PValue<=adjpvalcutoff))\n    }\n    finaloutput[[job]]=list(Sig_Pathways=output, stats=stats)\n } # end looping through each GREAT job\n  return(finaloutput)\n} # end function\n\n\n",
    "created" : 1472659423617.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1569839083",
    "id" : "B95634C6",
    "lastKnownWriteTime" : 1472659444,
    "last_content_update" : 1472659444372,
    "path" : "~/Desktop/ALTRE/R/8a_runGREAT.R",
    "project_path" : "R/8a_runGREAT.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}