{
    "collab_server" : "",
    "contents" : "#' Read in CSV (internal function)\n#' @param csvPath csvPath\n#' @export\nloadCSVFile <- function(csvPath) {\n\n    stopifnot(is.character(csvPath))\n\n    if (!file.exists(csvPath)) {\n        stop(\"CSV input file does not exist\")\n    }\n    csvfile <- readr::read_csv(csvPath,\n                        col_types = readr::cols_only(\n                          bamfiles = readr::col_character(),\n                          peakfiles = readr::col_character(),\n                          sample = readr::col_character(),\n                          replicate = readr::col_character()\n                          )\n                        )\n\n    if (ncol(csvfile) != 4) {\n      return(NULL)\n    } else {\n      csvfile <- csvfile[order(csvfile$replicate, csvfile$sample),]\n\n      #If the current directory is used (no path given), then get the directory first:\n      if (length(grep(\"/\", csvPath)) + length(grep(\"\\\\*\", csvPath)) == 0) {\n        csvPath <- paste0(getwd(), \"/\", csvPath)\n      }\n      csvfile$datapath <- rep(gsub(\"(.*)\\\\/(.*)\", \"\\\\1\", csvPath), nrow(csvfile))\n      return(csvfile)\n    }\n}\n\n#' Read in BED Files (internal function)\n#' @param csvfile csvfile\n#' @export\nloadBedFiles <- function(csvfile) {\n    if (!is(csvfile, \"data.frame\"))\n        stop(\"csvfile must be a data.frame \")\n\n    readBed <- function(bedPath, ind) {\n\n\ttrackline <- utils::read.table(bedPath, nrows = 1, sep = \"\\t\")\n\t# if not track line:\n\tif (length(grep(\"track type\", trackline$V1)) == 0) {\n        \tbed <- DataFrame(readr::read_delim(bedPath,\n                                    delim = \"\\t\",\n                                    col_names = FALSE,\n                                    na = \".\"))[, 1:3]\n\t}\n\telse {# if there is a trackline\n\t\t                bed <- DataFrame(readr::read_delim(bedPath,\n                                delim = \"\\t\",\n                                col_names = FALSE,\n                                na = \".\", skip = 1))[, 1:3]\n\t}\n        colnames(bed) <- c(\"seqnames\", \"start\", \"end\")\n        bed <- DataFrame(bed, csvfile[ind, c(\"sample\", \"replicate\")])\n        bed <- within(bed, {\n            start <- start + 1L\n            sample <- factor(sample)\n            replicate <- factor(replicate)\n        })\n        return(bed)\n    }\n\n    bedFilesPath <- file.path(csvfile$datapath, csvfile$peakfiles)\n    bedFiles <- mapply(readBed, bedFilesPath, seq_along(bedFilesPath))\n    names(bedFiles) <- paste(csvfile$sample, csvfile$replicate, sep = \"_\")\n    hotspots <- lapply(bedFiles, function(x) as(x, \"GRanges\"))\n\n    return(GRangesList(hotspots))\n}\n\n#' Read in BAM files (internal function)\n#' @param csvfile csvfile\n#' @export\nloadBamFiles <- function(csvfile) {\n    if (!is(csvfile, \"data.frame\"))\n        stop(\"csvfile must be a data.frame \")\n\n    bamfiles <- file.path(csvfile$datapath, csvfile$bamfiles)\n    if (!all(file.exists(bamfiles))) {\n        stop(\"bamfiles with the specified paths do not exist; fix CSV file\")\n    }\n    indexfiles <- file.path(csvfile$datapath,\n                            paste(csvfile$bamfiles,\n                                  \".bai\",\n                                  sep = \"\"))\n    if (!all(file.exists(indexfiles))) {\n        bamFiles <- Rsamtools::BamFileList(bamfiles,\n                                           yieldSize = 1e+05)\n    } else {\n        bamFiles <- Rsamtools::BamFileList(bamfiles,\n                                           index = indexfiles,\n                                           yieldSize = 1e+05)\n    }\n    return(bamFiles)\n}\n\n\n\n#' get TSS file\n#' @export\ngetTSS <- function() {\n    edb <- EnsDb.Hsapiens.v75::EnsDb.Hsapiens.v75\n    ensembldb::seqlevelsStyle(edb) <- \"UCSC\"\n    TSSdb <- ensembldb::promoters(edb,\n                                  filter = list(\n                                    ensembldb::SeqnameFilter(\n                                      paste0(\"chr\", c(1:22, \"X\", \"Y\"))),\n                                    ensembldb::GeneidFilter(\"ENSG%\", \"like\")),\n        columns = c(\"tx_seq_start\",\n                    \"tx_id\",\n                    \"tx_biotype\",\n                    \"gene_id\",\n                    \"gene_name\"),\n        upstream = 0,\n        downstream = 2)\n    return(TSSdb)\n}\n",
    "created" : 1473862076980.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "469453419",
    "id" : "A339DB2F",
    "lastKnownWriteTime" : 1473859756,
    "last_content_update" : 1473859756,
    "path" : "~/Desktop/ALTRE/R/1_getfiles.R",
    "project_path" : "R/1_getfiles.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}