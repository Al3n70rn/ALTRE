{
    "collab_server" : "",
    "contents" : "#' Given the output from getConsensusPeaks, generate a barplot\n#' of countstatistics\n#'\n#' @param samplepeaks output generated from getConsensusPeaks\n#' @param palette RColorBrewer palette to change graph colors\n#' @param xlabel label for x-axis (default, types of peaks - e.g. ConsensusPeaks, rep1, rep2, etc.)\n#' @param ylabel label for y-axis (default, \"Peak Counts\")\n#' @param xlabelsize size of xlabel (default, 15px)\n#' @param ylabelsize size of ylabel (default, 15px)\n#' @param maintitle main title (default, \"Peak Counts by Cell Type\")\n#' @param subtitle subtitle (default, \"For bioreplicates and their merged consensus track\")\n#' @param maintitlesize main title size (default, 20px)\n#' @param subtitlesize subitle size (default 15px)\n#' @return a highcharter object\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks,\n#' minreps = 2)\n#' plotConsensusPeaks(samplepeaks = consensusPeaks)}\n#' @export\n#'\nplotConsensusPeaks <- function(samplepeaks,\n                               palette = NULL,\n                               xlabel = NULL,\n                               ylabel = \"Peak Counts\",\n                               xlabelsize = '15px',\n                               ylabelsize ='15px',\n                               maintitle = \"Peak Counts by Cell Type\",\n                               subtitle = \"For bioreplicates and their merged consensus track\",\n                               maintitlesize = \"20px\",\n                               subtitlesize = \"15px\") {\n\n  if ( !is.null(palette) ) {\n    cols <- RColorBrewer::brewer.pal(3, palette)\n  } else {\n    cols <- RColorBrewer::brewer.pal(3, \"Set1\")\n  }\n  CellType <- NULL\n  #without this R CMD check throws no visible binding for global variable error\n  consPeaksStats <- samplepeaks$consPeaksStats\n  row.names(consPeaksStats) <- NULL\n  consPeaksStats[, 2] <-\n    as.numeric(as.character(consPeaksStats[[2]]))\n  consPeaksStats[, 3] <-\n    as.numeric(as.character(consPeaksStats[[3]]))\n  statsFormated <-\n    tidyr::gather(consPeaksStats, \"CellType\", \"Count\", 2:3)\n\n  plottingData <- statsFormated %>%\n    split(levels(as.factor(statsFormated$CellType)))\n\n  col1 <- cols[1]\n  col2 <- cols[2]\n\n  if ( is.null(xlabel) ) {\n  xLabel <- as.character(samplepeaks$consPeaksStats$PeakType)\n  } else {\n    xLabel <- xlabel\n  }\n\n  p <- highchart() %>%\n    hc_title(text = maintitle,\n             style = list(color = '#2E1717',\n                          fontSize = maintitlesize,\n                          fontWeight = 'bold')) %>%\n    hc_subtitle(text = subtitle,\n                style = list(fontSize = subtitlesize)) %>%\n    hc_add_series(\n      color = col1,\n      data = plottingData[[1]]$Count,\n      name = names(plottingData[1]),\n      type = \"column\",\n      dataLabels = list(\n        enabled = TRUE,\n        rotation = 270,\n        color = '#FFFFFF',\n        y = 40\n      )\n    ) %>%\n    hc_add_series(\n      color = col2,\n      data = plottingData[[2]]$Count,\n      name = names(plottingData[2]),\n      dataLabels = list(\n        enabled = TRUE,\n        rotation = 270,\n        color = '#FFFFFF',\n        y = 40\n      ),\n      type = \"column\"\n    ) %>%\n    hc_yAxis(title = list(text = ylabel,\n                          style = list(fontSize = ylabelsize)),\n             labels = list(format = \"{value}\")) %>%\n    hc_xAxis(categories = xLabel,\n\t            labels = list(style = list(fontSize = xlabelsize))) %>%\n    hc_legend(\n      enabled = TRUE,\n      layout = \"horizontal\",\n      align = \"center\",\n      horizontalAlign = \"middle\",\n      verticalAlign = \"top\",\n      floating = FALSE,\n      maxHeight = 100,\n      y = 50\n    ) %>%\n    hc_tooltip(\n      headerFormat = \"<b>{series.name}_{point.key}</b><br>\",\n      pointFormat = \"{point.y}\",\n      valueSuffix = ' peaks'\n    ) %>%\n    hc_exporting(enabled = TRUE)\n  return(p)\n}\n\n####################################################################\n\n#' Given the output from combineAnnotatePeaks,\n#' plot a barplot showing number of peaks before/after merging or length of\n#' peaks before/after merging\n#' (only works if peaks were merged)\n#'\n#' @param conspeaks output generated from combineAnnotatePeaks\n#' @param palette RColorBrewer palette to change graph colors\n#' @param viewer whether the plot should be displayed in the RStudio viewer or\n#'        in Shiny/Knittr\n#' @param xlabels labels for x-axis (default, Before merging/After merging)\n#' @param leftylabel label for y-axis for number of REs plot (default, \"Number of REs\")\n#' @param rightylabel label for y-axis for mean length plot (default, \"Mean length of REs\")\n#' @param xlabelsize size of xlabel (default, 15px)\n#' @param leftylabelsize size of leftylabel (default, 15px)\n#' @param rightylabelsize size of rightylabel (default, 15px)\n#' @param leftmaintitle main title for number of REs plot (default, \"Number of REs\")\n#' @param rightmaintitle main title for mean length of REs plot (default, \"Mean length of REs\")\n#' @param leftmaintitlesize main title size for number of REs plot (default, 20px)\n#' @param rightmaintitlesize main title size for mean length of REs plot (default 15px)\n#' @return a highcharter object\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks,\n#' minreps = 2)\n#' TSSannot <- getTSS()\n#' consPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consPeaks,\n#'                                           TSS = TSSannot,\n#'                                           merge = TRUE,\n#'                                           regionspecific = TRUE,\n#'                                           distancefromTSSdist = 1500,\n#'                                           distancefromTSSprox = 1000)\n#' plotCombineAnnotatePeaks(consPeaksAnnotated)\n#' }\n#' @export\n#'\nplotCombineAnnotatePeaks <- function(conspeaks,\n                                     viewer = TRUE,\n                                     palette = NULL,\n                                     rightmaintitle = \"Mean Length of REs\",\n                                     leftmaintitle = \"Number of REs\",\n                                     xlabels = c(\"Before merging\",\"After merging\"),\n                                     leftylabel = \"Number of REs\",\n                                     rightylabel = \"Mean Length of REs\",\n                                     xlabelsize = \"15px\",\n                                     leftylabelsize = \"15px\",\n                                     rightylabelsize = \"15px\",\n                                     leftmaintitlesize = \"20px\",\n                                     rightmaintitlesize = \"20px\") {\n  if ( !is.null(palette) ) {\n    cols <- RColorBrewer::brewer.pal(4, palette)\n  } else {\n    cols <- RColorBrewer::brewer.pal(4, \"Set1\")\n  }\n\n  CellType <- NULL\n  #R CMD check throws no visible binding for global variable error\n\n  mergeStats <- conspeaks$mergestats\n  row.names(mergeStats) <- NULL\n  mergeStats[, 2] <-  as.numeric(as.character(mergeStats[[2]]))\n  mergeStats[, 3] <-  as.numeric(as.character(mergeStats[[3]]))\n  mergeStatsFormatted <-\n    tidyr::gather(mergeStats, \"CellType\", \"Count\", 2:3)\n\n\n  if (nrow(mergeStatsFormatted) == 1) {\n    stop(\n      \"No plot to show since merging was not performed\n      when calling combineAnnotatePeaks function\"\n    )\n  }\n\n\n  feature <- \"TotalNumber\"\n  if (feature == \"TotalNumber\") {\n    mergeStatsTotal <- dplyr::filter(mergeStatsFormatted,\n                                     CellType == \"TotalNumber\")\n    thecondition <-\n      matrix(unlist(strsplit(mergeStatsTotal$Condition, \"_\")),\n             nrow = 3, ncol = 4)[2, ]\n    mergeStatsBefore <- dplyr::filter(mergeStatsTotal,\n                                      thecondition == \"before\")\n    mergeStatsAfter <- dplyr::filter(mergeStatsTotal,\n                                     thecondition == \"after\")\n\n    p1 <- highchart(height = 400) %>%\n      hc_title(text = leftmaintitle,\n               style = list(color = '#2E1717',fontSize=leftmaintitlesize,\n                            fontWeight = 'bold')) %>%\n      hc_add_series(\n        data = mergeStatsBefore$Count,\n        name = c(\"TSS-distal\"),\n        type = \"column\",\n        dataLabels = list(\n          enabled = TRUE,\n          rotation = 270,\n          color = '#FFFFFF',\n          y = 40\n        )\n      ) %>%\n      hc_add_series(\n        data = mergeStatsAfter$Count,\n        name = c(\"TSS-proximal\"),\n        type = \"column\",\n        dataLabels = list(\n          enabled = TRUE,\n          rotation = 270,\n          color = '#FFFFFF',\n          y = 40\n        )\n      ) %>%\n      hc_yAxis(title = list(text = leftylabel,style=list(fontSize=leftylabelsize)),\n               labels = list(format = \"{value}\")) %>%\n      hc_xAxis(categories = xlabels,\n               labels=list(style=list(fontSize=xlabelsize))) %>%\n      hc_legend(\n        enabled = TRUE,\n        layout = \"horizontal\",\n        align = \"center\",\n        verticalAlign = \"bottom\",\n        floating = FALSE,\n        maxHeight = 100,\n        x = 0,\n        y = 17\n      ) %>%\n      hc_tooltip(\n        headerFormat = \"<b>{series.name}_{point.key}</b><br>\",\n        pointFormat = \"{point.y}\",\n        valueSuffix = ' peaks'\n      ) %>%\n      hc_colors(cols) %>%\n      hc_exporting(enabled = TRUE)\n\n  }\n\n  feature <- \"MeanLength\"\n  if (feature == \"MeanLength\") {\n    mergeStatsMean <- dplyr::filter(mergeStatsFormatted,\n                                    CellType == \"MeanLength\")\n    thecondition <-\n      matrix(unlist(strsplit(mergeStatsMean$Condition, \"_\")),\n             nrow = 3,\n             ncol = 4)[2,]\n    mergeStatsBefore <- dplyr::filter(mergeStatsMean,\n                                      thecondition == \"before\")\n    mergeStatsAfter <- dplyr::filter(mergeStatsMean,\n                                     thecondition == \"after\")\n\n\n    p2 <- highchart(height = 400) %>%\n      hc_title(text = rightmaintitle,\n               style = list(color = '#2E1717',fontSize=rightmaintitlesize,\n                            fontWeight = 'bold')) %>%\n      hc_add_series(\n        data = mergeStatsBefore$Count,\n        name = c(\"TSS-distal\"),\n        type = \"column\",\n        dataLabels = list(\n          enabled = TRUE,\n          rotation = 270,\n          color = '#FFFFFF',\n          y = 40\n        )\n      ) %>%\n      hc_add_series(\n        data = mergeStatsAfter$Count,\n        name = c(\"TSS-proximal\"),\n        type = \"column\",\n        dataLabels = list(\n          enabled = TRUE,\n          rotation = 270,\n          color = '#FFFFFF',\n          y = 40\n        )\n      ) %>%\n      hc_yAxis(\n        title = list(text = rightylabel,\n                     style = list(fontSize = rightylabelsize)),\n        labels = list(format = \"{value}\")\n      ) %>%\n      hc_xAxis(categories = xlabels,\n               labels = list(style = list(fontSize = xlabelsize))) %>%\n      hc_legend(\n        enabled = TRUE,\n        layout = \"horizontal\",\n        align = \"center\",\n        verticalAlign = \"bottom\",\n        floating = FALSE,\n        maxHeight = 100,\n        x = 0,\n        y = 17\n      ) %>%\n      hc_tooltip(\n        headerFormat = \"<b>{series.name}_{point.key}</b><br>\",\n        pointFormat = \"{point.y}\",\n        valueSuffix = ' peaks'\n      ) %>%\n      hc_colors(cols) %>%\n      hc_exporting(enabled = TRUE)\n  }\n\n\n  if (viewer == TRUE) {\n    p <-\n      htmltools::browsable(hw_grid(p1, p2, ncol = 2, rowheight = 550))\n  }\n  else {\n    p <- hw_grid(p1, p2)\n  }\n  return(p)\n  }\n\n###############################################################################\n\n\n#' Given the output from getCounts, plot a density plot of\n#' log2 RPKM values of regulation regions\n#'\n#' @param countsConsPeaks output generated from getCounts\n#' @param palette RColorBrewer palette to change graph colors\n#' @param xlabel label for x-axis (default, \"log2 normalized read counts\")\n#' @param ylabel label for y-axis (default, \"Density\")\n#' @param xlabelsize size of xlabel (default, 15px)\n#' @param ylabelsize size of ylabel (default, 15px)\n#' @param maintitle main title (default, \"Density of log2 read counts\n#'      (normalized by library and region sizes)\")\n#' @param maintitlesize main title size (default, 20px)\n#'\n#' @return a highcharter object\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks,\n#' minreps = 2)\n#' TSSannot <- getTSS()\n#' consensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n#' TSS = TSSannot,\n#' merge = TRUE,\n#' regionspecific = TRUE,\n#' distancefromTSSdist = 1500,\n#' distancefromTSSprox = 1000)\n#' consensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n#'                                  sampleinfo = csvfile,\n#'                                  reference = 'SAEC',\n#'                                  chrom = 'chr21')\n#' plotGetCounts(consensusPeaksCounts)}\n#' @export\n\nplotGetCounts <- function(countsConsPeaks,\n            palette = NULL,\n            xlabel = \"Log2 Normalized Read Counts\",\n            ylabel = \"Density\",\n            xlabelsize = \"15px\",\n            ylabelsize = \"15px\",\n            maintitle = \"Density of log2 read counts\\n(normalized by library and region sizes)\",\n            maintitlesize = \"20px\"\n            ) {\n  region <- NULL\n  variable <- NULL\n  value = Reference_specific = Shared = Experiment_specific = c()\n  #set to null forR CMD Check error: Undefined global functions/variables\n\n  if ( !is.null(palette) ) {\n    cols <- RColorBrewer::brewer.pal(4, palette)\n  } else {\n    cols <- RColorBrewer::brewer.pal(4, \"Set1\")\n  }\n\n\n  mydf <- countsConsPeaks$regioncountsforplot\n  #  varstack <- suppressMessages(reshape2::melt(mydf))\n  varstack <-\n    suppressMessages(tidyr::gather(mydf, variable, value, -region))\n  varstack$variable = gsub(\"_.*\", \"\", varstack$variable)\n\n  mysamps <- unique(varstack$variable)\n\n  samp1dist <- dplyr::filter(varstack,\n                             region == \"TSS-distal\" &\n                               variable == mysamps[1])\n  samp2dist <- dplyr::filter(varstack,\n                             region == \"TSS-distal\" &\n                               variable == mysamps[2])\n  samp1prox <- dplyr::filter(varstack,\n                             region == \"TSS-proximal\" &\n                               variable == mysamps[1])\n  samp2prox <- dplyr::filter(varstack,\n                             region == \"TSS-proximal\" &\n                               variable == mysamps[2])\n\n\n  round <- JS(\n      \"function() { return '<b>'+'log2 read count' +'</b>:'+\n    Highcharts.numberFormat(this.x, 2) + ', <b>'+'density' +'</b>:' +\n      Highcharts.numberFormat(this.y, 2); }\"\n  )\n\n  p <- hchart(\n    stats::density(samp1dist$value),\n    area = TRUE,\n    name = paste(mysamps[1], \"TSS-distal\")\n  ) %>%\n    hc_title(\n      text = maintitle,\n      style = list(color = '#2E1717',\n                   fontSize = maintitlesize,\n                   fontWeight = 'bold')\n    ) %>%\n    hc_yAxis(title = list(text = ylabel,\n                          style = list(fontSize = ylabelsize))) %>%\n    hc_xAxis(title = list(text = xlabel,\n                          style = list(fontSize = xlabelsize))) %>%\n    hc_add_series_density(\n      stats::density(samp1prox$value),\n      area = TRUE,\n      name = paste(mysamps[1], \"TSS-proximal\")\n    ) %>%\n    hc_add_series_density(\n      stats::density(samp2dist$value),\n      area = TRUE,\n      name = paste(mysamps[2], \"TSS-distal\")\n    ) %>%\n    hc_add_series_density(\n      stats::density(samp2prox$value),\n      area = TRUE,\n      name = paste(mysamps[2], \"TSS-proximal\")\n    ) %>%\n    hc_colors(cols) %>%\n    hc_tooltip(formatter = round) %>%\n    hc_exporting(enabled = TRUE) %>%\n    hc_legend(\n      enabled = TRUE,\n      layout = \"horizontal\",\n      align = \"center\",\n      horizontalAlign = \"middle\",\n      verticalAlign = \"top\",\n      floating = TRUE,\n      maxHeight = 100,\n      y = 50)\n  return(p)\n}\n\n\n#' Create a volcano plot from the output of categAltrePeaks\n#'\n#' @param altrepeakscateg output generated from countanalysis() then\n#' categAltrePeaks()\n#' @param viewer whether the plot should be displayed in the RStudio viewer or\n#'        in Shiny/Knittr\n#' @param palette RColorBrewer palette to change graph colors\n#' @param xlabel label for x-axis (default, \"-log10 pvalue\")\n#' @param ylabel label for y-axis (default, \"Density\")\n#' @param xlabelsize size of xlabel (default, 15px)\n#' @param ylabelsize size of ylabel (default, 15px)\n#' @param maintitlelefty main title (default, \"TSS-distal\")\n#' @param maintitlerighty main title (default, \"TSS-proximal\")\n#' @param maintitlesize main title size (default, 20px)\n#'\n#' @return a highcharter object\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks, minreps = 2)\n#' TSSannot <- getTSS()\n#' consensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n#'                                           TSS = TSSannot,\n#'                                           merge = TRUE,\n#'                                           regionspecific = TRUE,\n#'                                           distancefromTSSdist = 1500,\n#'                                           distancefromTSSprox = 1000)\n#' consensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n#'                               reference = 'SAEC',\n#'                               sampleinfo = csvfile,\n#'                               chrom = 'chr21')\n#' alteredPeaks <- countanalysis(counts=consensusPeaksCounts,\n#'                              pval=0.01,\n#'                              lfcvalue=1)\n#' alteredPeaksCategorized <- categAltrePeaks(alteredPeaks,\n#'                              lfctypespecific = 1.5,\n#'                              lfcshared = 1.2,\n#'                              pvaltypespecific = 0.01,\n#'                              pvalshared = 0.05)\n#' plotCountAnalysis(alteredPeaksCategorized)\n#' }\n#' @export\n\nplotCountAnalysis <- function(altrepeakscateg, viewer = TRUE, palette = NULL,\n                              maintitlelefty = \"TSS-distal\",\n                              maintitlerighty = \"TSS-proximal\",\n                              ylabel = \"-log10 pvalue\",\n                              xlabel = \"log2fold change\",\n                              xlabelsize = \"15px\",\n                              ylabelsize = \"15px\",\n                              maintitlesize = \"20px\") {\n\n    if ( !is.null(palette) ) {\n        cols <- RColorBrewer::brewer.pal(4, palette)\n    } else {cols <- c(\"#C71585\", \"#d3d3d3\", \"#000080\", \"#00E5EE\")}\n                        #grey (ambiguous)\n                        #magenta (experiment-specific)\n                        #blue (reference specific)\n                            #blue (shared)\n\n  log2FoldChange <- NULL\n  padj <- NULL\n  REaltrecateg <- REaltrecategplot <- NULL\n  #To prevent R CMD check error\n\n  Referencespecificsamples <- altrepeakscateg[[3]]\n  allsamples <- colnames(altrepeakscateg$analysisresults)[11:12]\n  Experimentspecificsamples <- allsamples[which(!(allsamples %in% Referencespecificsamples))]\n\n  Referencespecific <- paste0(Referencespecificsamples, \"SpecificByIntensity\")\n  Experimentspecific <- paste0(Experimentspecificsamples, \"SpecificByIntensity\")\n\n  Referencespecificlabels <- paste0(Referencespecificsamples, \"-Specific (by intensity)\")\n  Experimentspecificlabels <- paste0(Experimentspecificsamples, \"-Specific (by intensity)\")\n\n\n  toplot <- altrepeakscateg$analysisresults[ , c(\"region\",\n                                                \"log2FoldChange\",\n                                                \"padj\",\n                                                \"REaltrecategplot\")]\n  replacement <- sub(Referencespecific, Referencespecificlabels, toplot$REaltrecategplot)\n  replacement <- sub(Experimentspecific, Experimentspecificlabels, replacement)\n  toplot$REaltrecategplot <- replacement\n\n  tssdist <- toplot[which(toplot$region == \"TSS-distal\"), ]\n  tssdist$padj <- -log10(tssdist$padj)\n  tssprox <- toplot[which(toplot$region == \"TSS-proximal\"), ]\n  tssprox$padj <- -log10(tssprox$padj)\n\n  # remove the NAs\n  tssdist <- tssdist[!is.na(tssdist$padj), -1]\n  tssprox <- tssprox[!is.na(tssprox$padj), -1]\n\n  # order values\n  tssdist <- tssdist[order(tssdist$padj,\n                           tssdist$log2FoldChange,\n                           decreasing = TRUE), ]\n  tssprox <- tssprox[order(tssprox$padj,\n                           tssprox$log2FoldChange,\n                           decreasing = TRUE), ]\n\n  if ((dim(tssdist)[1] + dim(tssprox)[1]) > 6000) {\n\n    message(\"Plot doesn't show all data points. Data around the origin has been trimmed\")\n\n    # remove shared\n    tssdist <- tssdist[!(tssdist$REaltrecategplot == \"Shared\"), ]\n    tssprox <- tssprox[!(tssprox$REaltrecategplot == \"Shared\"), ]\n\n    #####################\n    # trim the data\n\n    cutoff_p <- 5\n    cutoff_fold <- 4\n\n    tssdistEdges <- tssdist[tssdist$padj > cutoff_p &\n                              (abs(tssdist$log2FoldChange) > cutoff_fold), ]\n    tssdistCenter <- tssdist[!(tssdist$padj > cutoff_p &\n                                 (abs(tssdist$log2FoldChange) > cutoff_fold)), ]\n\n    tssproxEdges <- tssprox[tssprox$padj > cutoff_p &\n                              (abs(tssprox$log2FoldChange) > cutoff_fold), ]\n    tssproxCenter <- tssprox[!(tssprox$padj > cutoff_p &\n                                 (abs(tssprox$log2FoldChange) > cutoff_fold)), ]\n\n    n1 <- dim(tssdistCenter)[1]\n    n2 <- dim(tssproxCenter)[1]\n\n    nsamp <- 1000\n\n    idx1 <- sort(stats::rexp(min(nsamp ,  3*(n1 %/% 4)), 2))\n    idx1 <- unique(floor(n1 * (idx1 / max(idx1))))\n\n    idx2 <- sort(stats::rexp(min(nsamp ,  3*(n2 %/% 4)), 2))\n    idx2 <- unique(floor(n2 * (idx2 / max(idx2))))\n\n    tssdistCenter <- tssdistCenter[idx1, ]\n    tssproxCenter <- tssproxCenter[idx2, ]\n\n    tssdist <- rbind(tssdistEdges, tssdistCenter)\n    tssprox <- rbind(tssproxEdges, tssproxCenter)\n\n  } else{\n\n    message(\"Plot shows all data points. Data around the origin has not been trimmed\")\n  }\n\n\n\n  # upperThresh1 <- max((n1 - 1000),  3 * (n1 %/% 4))\n  # upperThresh2 <- max((n2 - 1000),  3 *(n2 %/% 4))\n  # lowerThresh1 <-   (n1 %/% 4)\n  # lowerThresh2 <-   (n2 %/% 4)\n  #\n  # idx1 <- c(sample((lowerThresh1 + 1):upperThresh1,\n  #                       min(3000, (upperThresh1 - lowerThresh1))),\n  #               (upperThresh1 + 1):n1\n  #                )\n  # idx2 <- c(sample((lowerThresh2 + 1):upperThresh2,\n  #                       min(3000, (upperThresh2 - lowerThresh2))),\n  #               (upperThresh2 + 1):n2\n  #               )\n\n\n  ###########################\n\n    p1 <- highchart() %>%\n      hc_chart(type = \"scatter\") %>%\n      hc_plotOptions(\n        scatter = list(marker = list(radius = 2),\n                       turboThreshold = 0)\n      ) %>%\n      hc_title(\n        text = maintitlelefty,\n        style = list(color = '#2E1717',\n                     fontSize = maintitlesize,\n                     fontWeight = 'bold')\n      ) %>%\n      hc_add_series_df(\n        data = tssdist,\n        x = log2FoldChange,\n        y = padj,\n        type = \"scatter\",\n        group = REaltrecategplot\n      )  %>%\n      hc_yAxis(title = list(text = ylabel,\n                            style = list(fontSize = ylabelsize))) %>%\n      hc_xAxis(title = list(text = xlabel,\n                            style = list(fontSize = xlabelsize))) %>%\n      hc_tooltip(headerFormat = \"\",\n                 pointFormat  = \"<b>log2FC</b> = {point.x}<br> <b>-log10pvalue</b>\n                = {point.y}<br>\") %>%\n      hc_colors(cols) %>%\n      hc_exporting(enabled = TRUE)\n\n    p2 <- highchart() %>%\n      hc_plotOptions(\n        scatter = list(marker = list(radius = 2))\n      ) %>%\n      hc_chart(type = \"scatter\") %>%\n      hc_title(\n        text = maintitlerighty,\n        style = list(color = '#2E1717',\n                     fontSize = maintitlesize,\n                     fontWeight = 'bold')\n      ) %>%\n      hc_add_series_df(\n        data = tssprox,\n        x = log2FoldChange,\n        y = padj,\n        type = \"scatter\",\n        group = REaltrecategplot\n      )  %>%\n      hc_yAxis(title = list(text = ylabel,\n                            style = list(fontSize = ylabelsize))) %>%\n      hc_xAxis(title = list(text = xlabel,\n                            style = list(fontSize = xlabelsize))) %>%\n      hc_tooltip(headerFormat = \"\",\n                 pointFormat  = \"<b>log2FC</b> = {point.x}\n                 <br> <b>-log10pvalue</b> = {point.y}<br>\",\n                 valueDecimals = 2) %>%\n      hc_colors(cols) %>%\n      hc_exporting(enabled = TRUE)\n\n    if (viewer == TRUE) {\n      p <-\n        htmltools::browsable(hw_grid(p1, p2, ncol = 2))\n    }\n    else {\n      p <- hw_grid(p1, p2, ncol = 2)\n    }\n    return(p)\n  }\n\n###############################################################################\n#' Creates a boxplot to see the distribution of read counts in type-specific and\n#' shared TSS-proximal and TSS-distal regions.\n#'\n#' Takes the rlog transformation of the RRKM (Reads Per Kilobase of transcript\n#' per Million) of the read counts of type-specific and shared regulatory\n#' regions and plots the distribution of those read counts in all sample types\n#' analyzed in the workflow.\n#'\n#' @param analysisresults output generated from countanalysis() then\n#' categAltrePeaks()\n#' @param counts output generated from getCounts()\n#' @param palette RColorBrewer palette to change graph colors\n#' @param ylabel label for y-axis (default, \"Observations\")\n#' @param ylabelsize size of ylabel (default, 15px)\n#' @param xlabelsize size of xlabel (default, 15px)\n#' @param xlabel label for x-axis (default, sample names)\n\n#' @param maintitle main title (default, \"Distribution of Normalized Counts\")\n#' @param maintitlesize main title size (default, 20px)\n#' @return a highcharter object\n#'\n#' @examples\n#' \\dontrun{\n#' dir <- system.file('extdata', package='ALTRE', mustWork=TRUE)\n#' csvfile <- file.path(dir, 'lung.csv')\n#' sampleinfo <- loadCSVFile(csvfile)\n#' samplePeaks <- loadBedFiles(sampleinfo)\n#' consPeaks <- getConsensusPeaks(samplepeaks=samplePeaks,minreps=2)\n#' plotConsensusPeaks(samplepeaks=consPeaks)\n#' TSSannot<- getTSS()\n#' consPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consPeaks,\n#'                                           TSS = TSSannot,\n#'                                           merge = TRUE,\n#'                                           regionspecific = TRUE,\n#'                                           distancefromTSSdist = 1500,\n#'                                           distancefromTSSprox = 1000)\n#' counts_consPeaks <- getCounts(annotpeaks = consPeaksAnnotated,\n#'                               sampleinfo = sampleinfo,\n#'                               reference = 'SAEC',\n#'                               chrom = 'chr21')\n#' altre_peaks <- countanalysis(counts = counts_consPeaks,\n#'                              pval = 0.01,\n#'                              lfcvalue = 1)\n#' categaltre_peaks <- categAltrePeaks(altre_peaks,\n#'                                     lfctypespecific = 1.5,\n#'                                     lfcshared = 1.2,\n#'                                     pvaltypespecific = 0.01,\n#'                                     pvalshared = 0.05)\n#' plotDistCountAnalysis(categaltre_peaks, counts_consPeaks)\n#' }\n#' @export\n#'\nplotDistCountAnalysis <-\n  function(analysisresults,\n           counts,\n           palette = NULL,\n           xlabelsize = \"15px\",\n           ylabel = \"log2(FPKM)\",\n           ylabelsize = \"15px\",\n           maintitle = \"Distribution of Normalized Counts\",\n           maintitlesize = \"20px\",\n           xlabel = NULL) {\n    altrecateg <- altrecategplot <- REaltrecategplot <- c()\n    #Make sure to names things are from the user-entered sample names\n    reference <- analysisresults$reference\n    allSamples <- colnames(analysisresults$analysisresults)[11:12]\n    nonreference <- allSamples[which(!(allSamples %in% reference))]\n    Referencespecific <- paste0(reference, \"SpecificByIntensity\")\n    Experimentspecific <- paste0(nonreference, \"SpecificByIntensity\")\n\n    if (!is.null(palette)) {\n      cols <- RColorBrewer::brewer.pal(4, palette)\n    } else{\n      cols <- c(\"#C71585\", \"#d3d3d3\", \"#000080\", \"#00E5EE\")\n    }\n    #magenta (experiment-specific) #grey (ambiguous) #blue (shared))\n    #blue (reference specific)\n\n    readcounts <- counts$regioncounts\n    analysisresults <- analysisresults$analysisresults\n    errortest = try(SummarizedExperiment::assay(readcounts), silent = TRUE)\n    if (inherits(errortest, 'try-error') == TRUE) {\n      stop(\"The input for the readcounts arguement is\n           not a summerized experiment object!\")\n    }\n\n    if (is.data.frame(analysisresults) == FALSE)\n    {\n      stop(\"The input for the analysisresults arguement is not a dataframe!\")\n\n    }\n\n    # Check that counts and analysisresults are in the same order\n    countsinfo <-\n      as.data.frame(SummarizedExperiment::rowRanges(readcounts))\n    countcoord <-\n      paste0(countsinfo$seqnames, countsinfo$start, countsinfo$end)\n    analcoord <- paste0(analysisresults$chr,\n                        analysisresults$start,\n                        analysisresults$stop)\n\n    if (!all.equal(analcoord, countcoord)) {\n      stop(\"The peaks in the analysisresults and counts are not the same\")\n    }\n\n    PEcateg <- analysisresults$region\n    altrecategplot <- analysisresults$REaltrecategplot\n\n    # Get log2FPM values:\n    log2FPM <- log2(DESeq2::fpkm(readcounts, robust = TRUE) + 0.001)\n\n    # Average log2FPM values over replicats:\n    sampletypes <- SummarizedExperiment::colData(readcounts)$sample\n    meanlog2FPM <- c()\n\n  for (i in unique(sampletypes)) {\n    samp <- which(sampletypes == i)\n    meanlog2FPM <- cbind(meanlog2FPM,\n                        as.numeric(apply(log2FPM[, samp], 1, mean)))\n  }\n  colnames(meanlog2FPM) <- unique(sampletypes)\n\n  mydf <- data.frame(meanlog2FPM = meanlog2FPM,\n                    PEcateg = PEcateg,\n                    altrecateg = altrecategplot)\n  #TSSdistal <- dplyr::filter(mydf, PEcateg == \"TSS-distal\")\n  distal1 <- dplyr::filter(mydf, altrecateg == Experimentspecific)\n  distal2 <- dplyr::filter(mydf, altrecateg == \"Ambiguous\")\n  distal3 <- dplyr::filter(mydf, altrecateg == \"Shared\")\n  distal4 <- dplyr::filter(mydf, altrecateg == Referencespecific)\n\n  #TSSproximal <- dplyr::filter(mydf, PEcateg == \"TSS-proximal\")\n  proximal1 <- dplyr::filter(mydf, altrecateg == Experimentspecific)\n  proximal2 <- dplyr::filter(mydf, altrecateg == \"Ambiguous\")\n  proximal3 <- dplyr::filter(mydf, altrecateg == \"Shared\")\n  proximal4 <- dplyr::filter(mydf, altrecateg == Referencespecific)\n\n  mysamps = as.character(unique(sampletypes))\n  distal1_5num_samp1 <-\n    stats::fivenum(distal1[[paste(\"meanlog2FPM\", mysamps[1], sep = \".\")]])\n  proximal1_5num_samp1 <-\n    stats::fivenum(proximal1[[paste(\"meanlog2FPM\", mysamps[1], sep = \".\")]])\n  distal1_5num_samp2 <-\n    stats::fivenum(distal1[[paste(\"meanlog2FPM\", mysamps[2], sep = \".\")]])\n  proximal1_5num_samp2 <-\n    stats::fivenum(proximal1[[paste(\"meanlog2FPM\", mysamps[2], sep = \".\")]])\n\n  distal2_5num_samp1 <-\n    stats::fivenum(distal2[[paste(\"meanlog2FPM\", mysamps[1], sep = \".\")]])\n  proximal2_5num_samp1 <-\n    stats::fivenum(proximal2[[paste(\"meanlog2FPM\", mysamps[1], sep = \".\")]])\n  distal2_5num_samp2 <-\n    stats::fivenum(distal2[[paste(\"meanlog2FPM\", mysamps[2], sep = \".\")]])\n  proximal2_5num_samp2 <-\n    stats::fivenum(proximal2[[paste(\"meanlog2FPM\", mysamps[2], sep = \".\")]])\n\n  distal3_5num_samp1 <-\n    stats::fivenum(distal3[[paste(\"meanlog2FPM\", mysamps[1], sep = \".\")]])\n  proximal3_5num_samp1 <-\n    stats::fivenum(proximal3[[paste(\"meanlog2FPM\", mysamps[1], sep = \".\")]])\n  distal3_5num_samp2 <-\n    stats::fivenum(distal3[[paste(\"meanlog2FPM\", mysamps[2], sep = \".\")]])\n  proximal3_5num_samp2 <-\n    stats::fivenum(proximal3[[paste(\"meanlog2FPM\", mysamps[2], sep = \".\")]])\n\n  distal4_5num_samp1 <-\n    stats::fivenum(distal4[[paste(\"meanlog2FPM\", mysamps[1], sep = \".\")]])\n  proximal4_5num_samp1 <-\n    stats::fivenum(proximal4[[paste(\"meanlog2FPM\", mysamps[1], sep = \".\")]])\n  distal4_5num_samp2 <-\n    stats::fivenum(distal4[[paste(\"meanlog2FPM\", mysamps[2], sep = \".\")]])\n  proximal4_5num_samp2 <-\n    stats::fivenum(proximal4[[paste(\"meanlog2FPM\", mysamps[2], sep = \".\")]])\n\n  Experimentspecific_list <- list(distal1_5num_samp1,\n                                  proximal1_5num_samp1,\n                                  distal1_5num_samp2,\n                                  proximal1_5num_samp2)\n  Ambiguous_list <- list(distal2_5num_samp1,\n                         proximal2_5num_samp1,\n                         distal2_5num_samp2,\n                         proximal2_5num_samp2)\n  Shared_list <- list(distal3_5num_samp1,\n                      proximal3_5num_samp1,\n                      distal3_5num_samp2,\n                      proximal3_5num_samp2)\n  Referencespecific_list <- list(distal4_5num_samp1,\n                                 proximal4_5num_samp1,\n                                 distal4_5num_samp2,\n                                 proximal4_5num_samp2)\n\n  if (is.null(xlabel)) {\n  categ <- c(paste0(mysamps[1],' TSS-distal'),\n\tpaste0(mysamps[1],' TSS-proximal'),\n        paste0(mysamps[2],' TSS-distal'),\n\tpaste0(mysamps[2],' TSS-proximal'))\n  }\n  else(categ <- xlabel)\n\n  explabel <- paste0(nonreference, \"-specific (by intensity)\")\n  reflabel <- paste0(reference, \"-specific (by intensity)\")\n\n  round <- JS(\n      \"function() { return '<b>'+'log2 read count' +'</b>:'+\n    Highcharts.numberFormat(this.x, 2) + ', <b>'+'density' +'</b>:' +\n      Highcharts.numberFormat(this.y, 2); }\"\n  )\n\n    p <- highchart() %>%\n      hc_title(text = maintitle,\n               style = list(color = '#2E1717',\n                            fontWeight = 'bold',\n                            fontSize = maintitlesize)) %>%\n      hc_plotOptions(\n        boxplot = list(\n          fillColor = '#ffffff',\n          lineWidth = 2,\n          medianColor = '#000000',\n          medianWidth = 2,\n          stemColor = '#000000',\n          stemDashStyle = 'dot',\n          stemWidth = 1,\n          whiskerColor = '#000000',\n          whiskerLength = '20%',\n          whiskerWidth = 3\n        )\n      ) %>%\n      hc_add_series(data = Experimentspecific_list,\n                    fillColor = cols[1],\n                    name = explabel,\n                    type = \"boxplot\") %>%\n      hc_add_series(data = Ambiguous_list,\n                    fillColor = cols[2],\n                    name = 'Ambiguous',\n                    type = \"boxplot\") %>%\n      hc_add_series(data = Shared_list,\n                    fillColor = cols[3],\n                    name = 'Shared',\n                    type = \"boxplot\") %>%\n      hc_add_series(data = Referencespecific_list,\n                    fillColor = cols[4],\n                    name = reflabel,\n                    type = \"boxplot\") %>%\n      hc_yAxis(title = list(text = ylabel,\n                            style = list(fontSize = ylabelsize)),\n               labels = list(format = \"{value}\")) %>%\n      hc_xAxis(categories = categ,\n               labels = list(style = list(fontSize = xlabelsize))) %>%\n      hc_tooltip(valueDecimals = 2) %>%\n      hc_colors(cols) %>%\n      hc_exporting(enabled = TRUE)\n    return(p)\n    }\n\n\n#' Plots a pie that compares altered regions as determined by peak\n#' presence or by #' differential counts.  The type of regulatory region\n#' (TSS-proximal, TSS-distal, or both) and type of peak comparison\n#' (intensity or peak) must be specified.\n#'\n#' @param analysisresultsmatrix analysisresults of Intensity analysis place into\n#' analysisresults matrix by the analyzeanalysisresults function\n#' @param region pick a region, regions can be 'TSS-distal', 'TSS-proximal',\n#' or 'both' -- INCLUDE quotes\n#' @param method pick a method, methods can be 'Intensity' or 'Peak'\n#' include quotes\n#' @param palette RColorBrewer palette to change graph colors\n#' @param maintitle main title (default generated from sample names)\n#' @param maintitlesize main title size (default, 20px)\n#' @return pie chart\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks,\n#' minreps = 2)\n#' TSSannot <- getTSS()\n#' consensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n#' TSS = TSSannot,\n#' merge = TRUE,\n#' regionspecific = TRUE,\n#' distancefromTSSdist = 1500,\n#' distancefromTSSprox = 1000)\n#' consensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n#'                                  sampleinfo = csvfile,\n#'                                  reference = 'SAEC',\n#'                                  chrom = 'chr21')\n#' alteredPeaks <- countanalysis(counts = consensusPeaksCounts,\n#' pval = 0.01,\n#' lfcvalue = 1)\n#' alteredPeaksCategorized <- categAltrePeaks(alteredPeaks,\n#'                                           lfctypespecific = 1.5,\n#'                                           lfcshared = 1.2,\n#'                                           pvaltypespecific = 0.01,\n#'                                           pvalshared = 0.05)\n#' comparePeaksAnalysisResults <- comparePeaksAltre(alteredPeaksCategorized)\n#' plotCompareMethods(comparePeaksAnalysisResults)\n#'}\n\nplotCompareMethods <- function(analysisresultsmatrix,\n                               region = \"both\",\n                               method = \"Intensity\",\n                               palette = NULL,\n                               maintitle = NULL,\n                               maintitlesize = \"20px\") {\n\n\n\n    analysisresultsmatrix <- analysisresultsmatrix$analysisresultsmatrix\n\n    if (!is.null(palette)) {\n    cols <- RColorBrewer::brewer.pal(3, palette)\n  }\n  else{\n    cols <- c(\"#C71585\", \"#00E5EE\", \"#000080\", \"#d3d3d3\")\n  }\n\n  if (region == \"TSS-proximal\") {\n    feature <- c(\"TSS-proxs\")\n    coordinates <- c(2, 5, 8)\n  }\n  if (region == \"TSS-distal\") {\n    feature <- c(\"TSS-dists\")\n    coordinates <- c(1, 4, 7)\n  }\n  if (region == \"both\") {\n    region <- c(\"All\")\n    feature <- c(\"TSS-dists\", \"TSS-proxs\")\n    coordinates <- c(3, 6, 9)\n  }\n  # identifies the correct numbers from the\n  # analysisresults matrix based on the\n  # regulatory region of interest\n  if (method == \"Intensity\") {\n    case <- analysisresultsmatrix[coordinates[1], 1]\n    reference <- analysisresultsmatrix[coordinates[2], 1]\n    shared <- analysisresultsmatrix[coordinates[3], 1]\n  }\n\n  if (method == \"Peak\") {\n    case <- analysisresultsmatrix[coordinates[1], 2]\n    reference <- analysisresultsmatrix[coordinates[2], 2]\n    shared <- analysisresultsmatrix[coordinates[3], 2]\n  }\n  # identifies the correct numbers from the\n  # analysisresults matrix based on the\n  # method of region\n  # string <- paste(\n  #   rownames(analysisresultsmatrix)[1],\n  #   rownames(analysisresultsmatrix)[2],\n  #   rownames(analysisresultsmatrix)[3],\n  #   rownames(analysisresultsmatrix)[4],\n  #   rownames(analysisresultsmatrix)[5],\n  #   rownames(analysisresultsmatrix)[6],\n  #   rownames(analysisresultsmatrix)[7],\n  #   rownames(analysisresultsmatrix)[8],\n  #   rownames(analysisresultsmatrix)[9]\n  # )\n\n  #stringsplit <- strsplit(string, \" \")\n  #uniquestringsplit <- unique(stringsplit[[1]])\n  split <-\n    unlist(strsplit(rownames(analysisresultsmatrix)[1], split = \" \"))\n  names <- split[!(split %in% c(\"TSS-dists\"))]\n  names <- paste(names, collapse = \" \")\n  casename <- names\n\n  split <-\n    unlist(strsplit(rownames(analysisresultsmatrix)[4], split = \" \"))\n  names <- split[!(split %in% c(\"TSS-dists\"))]\n  names <- paste(names, collapse = \" \")\n  referencename <- names\n\n  # this is a way to the name of the 'case'\n  # from the analysisresults matrix\n\n  if (is.null(maintitle)) {\n    mtitle <- paste(region, method)\n  } else {\n    mtitle <- maintitle\n    }\n\n  p <- highchart() %>%\n    hc_chart(type = \"pie\") %>%\n    hc_title(\n      text = mtitle,\n      style = list(color = '#2E1717',\n                   fontWeight = 'bold',\n                   fontSize = maintitlesize)) %>%\n    hc_plotOptions(series = list(showInLegend = TRUE)) %>%\n    hc_legend(\n      enabled = TRUE,\n      layout = \"horizontal\",\n      align = \"center\",\n      verticalAlign = \"bottom\",\n      floating = FALSE,\n      maxHeight = 100,\n      x = 0,\n      y = 16\n    ) %>%\n    hc_add_series(\n      data = list(\n        list(\n        y = case,\n        name = casename,\n        dataLabels = FALSE\n      ),\n      list(\n        y = reference,\n        name = referencename,\n        dataLabels = FALSE\n      ),\n      list(\n        y = shared,\n        name = \"Shared\",\n        dataLabels = FALSE\n      )\n    ),\n    name = paste(region, method)\n    ) %>%\n    hc_colors(cols)  %>%\n    hc_exporting(enabled = TRUE)\n  return(p)\n}\n\n#' Plots pie charts for comparison of two methods of identifying altered\n#' regulatory regions.  Makes pie charts for TSS-proximal, TSS-distal, and\n#' combined for both intensity-based peaks and for peaks identified by hotspot\n#' calling algorithms.  There is no return value. Six pie charts swill be\n#' plotted.\n#' @param analysisresultsmatrix analysisresults of countanalysis function\n#' place into a a analysisresults matrix by the analyzeanalysisresults function\n#' @param viewer whether the plot should be displayed in the RStudio viewer or\n#' in Shiny/Knittr\n#' @param palette RColorBrewer palette to change graph colors\n#' @param title11 title of the first graph in the first row\n#' @param title12 title of the second graph in the first row\n#' @param title13 title of the third graph in the first row\n#' @param title21 title of the first graph in the second row\n#' @param title22 title of the second graph in the second row\n#' @param title23 title of the third graph in the second row\n#' @param maintitlesize main title size (default, 20px)\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks,\n#' minreps = 2)\n#' TSSannot <- getTSS()\n#' consensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n#' TSS = TSSannot,\n#' merge = TRUE,\n#' regionspecific = TRUE,\n#' distancefromTSSdist = 1500,\n#' distancefromTSSprox = 1000)\n#' consensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n#'                                  sampleinfo = csvfile,\n#'                                  reference = 'SAEC',\n#'                                  chrom = 'chr21')\n#' alteredPeaks <- countanalysis(counts = consensusPeaksCounts,\n#' pval = 0.01,\n#' lfcvalue = 1)\n#' alteredPeaksCategorized <- categAltrePeaks(alteredPeaks,\n#'                                           lfctypespecific = 1.5,\n#'                                           lfcshared = 1.2,\n#'                                           pvaltypespecific = 0.01,\n#'                                           pvalshared = 0.05)\n#' comparePeaksAnalysisResults <- comparePeaksAltre(alteredPeaksCategorized)\n#' plotCompareMethodsAll(comparePeaksAnalysisResults)\n#' }\n#' @export\n#'\nplotCompareMethodsAll <- function(analysisresultsmatrix,\n                                  viewer = TRUE,\n                                  palette = NULL,\n                                  title11 = NULL,\n                                  title12 = NULL,\n                                  title13 = NULL,\n                                  title21 = NULL,\n                                  title22 = NULL,\n                                  title23 = NULL,\n                                  maintitlesize = \"20px\"\n                                 ) {\n    if (!is.null(palette)) {\n      cols <- RColorBrewer::brewer.pal(3, palette)\n    }\n    else{\n      cols <- c(\"#00E5EE\", \"#C71585\", \"#000080\")\n    }\n\n\n\n    if (is.matrix(analysisresultsmatrix[[1]]) == FALSE) {\n      stop(\"The input is not a matrix!\")\n    }\n\n    p1 <- plotCompareMethods(analysisresultsmatrix,\n                             \"TSS-proximal\",\n                             \"Intensity\",\n                             palette = palette,\n                             maintitle = title11,\n                             maintitlesize = maintitlesize)\n    p2 <- plotCompareMethods(analysisresultsmatrix,\n                             \"TSS-distal\",\n                             \"Intensity\",\n                             palette = palette,\n                             maintitle = title12,\n                             maintitlesize = maintitlesize)\n    p3 <- plotCompareMethods(analysisresultsmatrix,\n                             \"both\",\n                             \"Intensity\",\n                             palette = palette,\n                             maintitle = title13,\n                             maintitlesize = maintitlesize)\n    p4 <- plotCompareMethods(analysisresultsmatrix,\n                             \"TSS-proximal\",\n                             \"Peak\",\n                             palette = palette,\n                             maintitle = title21,\n                             maintitlesize = maintitlesize)\n    p5 <- plotCompareMethods(analysisresultsmatrix,\n                             \"TSS-distal\",\n                             \"Peak\",\n                             palette = palette,\n                             maintitle = title22,\n                             maintitlesize = maintitlesize)\n    p6 <- plotCompareMethods(analysisresultsmatrix,\n                             \"both\",\n                             \"Peak\",\n                             palette = palette,\n                             maintitle = title23,\n                             maintitlesize = maintitlesize)\n\n    if (viewer == TRUE) {\n      p <- htmltools::browsable(hw_grid(p1, p2, p3, p4, p5, p6, ncol = 3,\n                                        rowheight = 300))\n    }\n    else {\n      p <- hw_grid(p1, p2, p3, p4, p5, p6, ncol = 3)\n    }\n    return(p)\n  }\n\n\n\n##############################################################################\n\n#' Given the output from processPathways(), creates a heatmap from\n#' the ouput of the GREAT enrichment analysis. Presence or absence of\n#' the pathway in enrichment of both type-specific (increased or decreased\n#' log2fold change, low p-value) and shared (no change, higher p-value)\n#' regulatory regions is plotted.\n#'\n#' @param input results from GREAT enrichment analysis\n#' @param pathwaycateg ontology, to see available ontologies in your input results (e.g. named\n#'\tGREATpathways, type getOntologies(GREATpathways)\n#' @param test character, \"Binom\" uses binomial test restuls, \"Hyper\" uses\n#'      hypergeometric test results.  Default is \"Binom\"\n#' @param numshow number of top pathways (ranked according to p-value) of each type\n#' \t(expt, reference, shared) to show in the plot (default=10)\n#' @param maintitle main title (default, \"GREAT Enrichment Analysis\")\n#' @param maintitlesize main title size (default, 20px)\n#' @param xlabelsize size of xlabel (default, 10px)\n#' @param ylabelsize size of ylabel (default, 10px)\n#' @param xlabel label for x-axis (default, Experiment-specific, shared, Reference-specific )\n#' @return heatmap\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks, minreps = 2)\n#' TSSannot <- getTSS()\n#' consensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n#'                                           TSS = TSSannot,\n#'                                           merge = TRUE,\n#'                                           regionspecific = TRUE,\n#'                                           distancefromTSSdist = 1500,\n#'                                           distancefromTSSprox = 1000)\n#' consensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n#'                               reference = 'SAEC',\n#'                               sampleinfo = csvfile,\n#'                               chrom = 'chr21')\n#' alteredPeaks <- countanalysis(counts=consensusPeaksCounts,\n#'                              pval=0.01,\n#'                              lfcvalue=1)\n#' alteredPeaksCategorized <- categAltrePeaks(alteredPeaks,\n#'                              lfctypespecific = 1.5,\n#'                              lfcshared = 1.2,\n#'                              pvaltypespecific = 0.01,\n#'                              pvalshared = 0.05)\n#' callPaths <- runGREAT(peaks = alteredPeaksCategorized)\n#' pathResults <- processPathways(callPaths, pathway_category = \"GO\",\n#' enrichcutoff = 2, adjpvalcutoff = 0.05)\n#' plotGREATenrich(pathResults, maintitle = \"GREAT Enrichment Analysis\",\n#' pathwaycateg = \"GO_Molecular_Function\")\n#'}\n#' @export\nplotGREATenrich <- function(input,\n                            maintitle = \"GREAT Enrichment Analysis\",\n                            pathwaycateg = NULL,\n                            test = \"Binom\",\n                            numshow = 10,\n                            maintitlesize = \"20px\",\n                            ylabelsize = \"10px\",\n                            xlabelsize = \"10px\",\n                            xlabel = NULL) {\n\n\n  variable = value = Experiment_specific = Reference_specific = Shared = c()\n\n  if (is.null(pathwaycateg)) {\n    stop(\"Please designate a pathway with the parameter pathwaycateg\")\n  }\n\n  if (is.list(input) == FALSE) {\n    stop(\n      \"The input is not a list! Please make sure you are\n      using the output from the enrichment analysis\"\n    )\n  }\n\n  if (is.na(match(test, c(\"Hyper\", \"Binom\")))) {\n    stop(\"test must be either 'Hyper' or 'Binom'\")\n  }\n\n  mycols = c(\"name\",\n             paste0(test, \"_Fold_Enrichment\"),\n             paste0(test, \"_adj_PValue\"))\n\n  if (is.list(input$ExperimentSpecificByIntensity$Sig_Pathways) == FALSE |\n      is.list(input$ReferenceSpecificByIntensity$Sig_Pathways) == FALSE |\n      is.list(input$Shared$Sig_Pathways) == FALSE |\n      length(input) != 3 |\n      length(which(!is.na(match(\n        mycols, colnames(input$ExperimentSpecificByIntensity$Sig_Pathways[[pathwaycateg]])\n      )))) !=\n      length(mycols) |\n      length(which(!is.na(match(\n        mycols, colnames(input$ReferenceSpecificByIntensity$Sig_Pathways[[pathwaycateg]])\n      )))) !=\n      length(mycols) |\n      length(match(mycols, colnames(input$Shared$Sig_Pathways[[pathwaycateg]]))) !=\n      length(mycols) |\n      all(\n        names(input) != c(\n          \"ExperimentSpecificByIntensity\",\n          \"ReferenceSpecificByIntensity\",\n          \"Shared\"\n        )\n      )) {\n    stop(\n      \"The input is not a list of three dataframes or there are no enriched pathways to plot.\n      Be sure the input is the output from running processPathways(()\"\n      )\n  }\n\n  up <-\n    input$ExperimentSpecificByIntensity$Sig_Pathways[[pathwaycateg]][, mycols]\n\n  if (is.null(nrow(up))) {\n    up$name <- NA\n  } else {\n    if (nrow(up) > numshow) {\n      # order by last row, which is always adjusted p-value\n      up <- up[order(up[, 3])[1:numshow], ]\n    }\n  }\n\n  reference <-\n    input$ReferenceSpecificByIntensity$Sig_Pathways[[pathwaycateg]][,mycols]\n  if (is.null(nrow(reference))) {\n    reference$name <- NA\n  } else {\n    if (nrow(reference) > numshow) {\n      # order by last row, which is always adjusted p-value\n      reference <- reference[order(reference[, 3])[1:numshow], ]\n    }\n  }\n\n  shared <- input$Shared$Sig_Pathways[[pathwaycateg]][, mycols]\n  if (is.null(nrow(shared))) {\n    shared$name <- NA\n  } else {\n    if (nrow(shared) > numshow) {\n      # order by last row, which is always adjusted p-value\n      shared <- shared[order(shared[, 3])[1:numshow], ]\n    }\n  }\n\n  # make a list of all the pathways in up, down, and shared\n  pathways <- unique(c(up$name,\n                       reference$name,\n                       shared$name))\n  pathways <- pathways[!is.na(pathways)]\n  if (is.na(pathways) || length(pathways) == 0) {\n    stop(\"No pathways are significant!\")\n  }\n\n  # make a matrix with as many row as there are pathways\n  heatmapmatrix <- matrix(data = NA,\n                          nrow = length(pathways),\n                          ncol = 3)\n  # name the rows with the pathway names\n  row.names(heatmapmatrix) <- pathways\n\n  colnames(heatmapmatrix) <-\n    c(\"Experiment_specific\", \"Reference_specific\", \"Shared\")\n\n  # places the adjusted p-value in the matrix is there is one\n  for (i in 1:nrow(heatmapmatrix)) {\n    #print(row.names(heatmapmatrix)[i])\n    if (row.names(heatmapmatrix)[i] %in% up$name) {\n      num1 <- which(up$name == row.names(heatmapmatrix)[i])\n      heatmapmatrix[i, 1] <- up[num1, mycols[3]]\n    }\n\n    if (row.names(heatmapmatrix)[i] %in% reference$name) {\n      num2 <- which(reference$name == row.names(heatmapmatrix)[i])\n      heatmapmatrix[i, 2] <- reference[num2, mycols[3]]\n    }\n\n    if (row.names(heatmapmatrix)[i] %in% shared$name) {\n      num3 <- which(shared$name == row.names(heatmapmatrix)[i])\n      heatmapmatrix[i, 3] <- shared[num3, mycols[3]]\n    }\n  }\n\n  # Create a data.frame of the heatmapmatrix and sort\n  heatmapdata <- as.data.frame(heatmapmatrix)\n  heatmapdata <- heatmapdata[order(\n    heatmapdata$Reference_specific,\n    heatmapdata$Experiment_specific,\n    heatmapdata$Shared,\n    decreasing = TRUE\n  ),]\n  # Create ids:\n  heatmapdata$id <- rownames(heatmapdata)\n  rownames(heatmapdata) <- c(1:nrow(heatmapdata))\n\n  #suppressMessages(meltedheatmapdata <- reshape2::melt(heatmapdata))\n  suppressMessages(\n    meltedheatmapdata <- tidyr::gather(\n      heatmapdata,\n      variable,\n      value,\n      Experiment_specific,\n      Reference_specific,\n      Shared\n    )\n  )\n\n  meltedheatmapdata$newid <-\n    stringr::str_wrap(meltedheatmapdata$id, width = 80)\n\n  meltedheatmapdata$id <- factor(meltedheatmapdata$id,\n                                 levels = unique(meltedheatmapdata$id))\n  #all possible values of X (type) and Y (pathways)\n  theXAxis <- as.character(meltedheatmapdata[, 2])\n  theYAxis <- meltedheatmapdata[, 4]\n\n  #unique values of X and Y\n  theUniqueY <- unique(meltedheatmapdata$newid)\n  theUniqueX <-\n    c(\"Experiment_specific\", \"Shared\", \"Reference_specific\")\n\n  # Substitute words with position on the meatrix\n  for (i in 0:(length(theUniqueY) - 1))\n  {\n    num <- which(theYAxis == theUniqueY[i + 1])\n    theYAxis[num] <- i\n  }\n  for (i in 0:(length(theUniqueX) - 1))\n  {\n    num <- which(theXAxis == theUniqueX[i + 1])\n    theXAxis[num] <- i\n  }\n\n  #create final formatting\n  dataforHeatmap <- as.data.frame(cbind(\n    as.numeric(theXAxis),\n    as.numeric(theYAxis),\n    as.numeric(meltedheatmapdata$value)\n#as.numeric(format(meltedheatmapdata$value,scientific=T,digits=2))\n  ))\n\n  formattedHeatmapData <- list_parse2(dataforHeatmap)\n\n  fntltp <- JS(\n    \"function(){\n    return 'pval='+this.point.value;\n    }\"\n   )\n\n  if (is.null(xlabel))\n  {categ = c(\"Experiment-specific\", \"Shared\", \"Reference-specific\")}\n  else\n  {categ = xlabel}\n\n  p <- highchart(width = 800, height = 700) %>%\n    hc_chart(type = \"heatmap\", spacingRight = 160) %>%\n    hc_title(text = maintitle,\n             style = list(color = '#2E1717',fontSize = maintitlesize,\n                          fontWeight = 'bold')) %>%\n    hc_xAxis(categories = categ,\n             labels = list(style = list(fontSize = xlabelsize))) %>%\n    hc_yAxis(categories = theUniqueY, labels = list(style = list(fontSize = ylabelsize))) %>%\n    hc_add_series(name = \"matrix location, p-value\",\n                  data = formattedHeatmapData) %>%\n    hc_tooltip(formatter = fntltp, valueDecimals = 2) %>%\n    hc_colorAxis(stops = color_stops(2, colors = c(\"#5097D1\", \"#DEEFF5\")),\n                 min = min(as.numeric(dataforHeatmap[ , 3]), na.rm = T),\n                 max = max(as.numeric(dataforHeatmap[ , 3]), na.rm = T)) %>%\n    hc_legend(\n      enabled = TRUE,\n      layout = \"vertical\",\n      align = \"right\",\n      verticalAlign = \"right\",\n      floating = FALSE,\n      maxWidth = 200,\n      x = 90,\n      y = 17\n    ) %>%\n    hc_exporting(enabled = TRUE)\n  #create final formatting\n  return(p)\n  } # end plotGREATenrich\n\n\n#' Create a volcano plot from the output of categAltrePeaks (ggplot2 version)\n#'\n#' @param altrepeakscateg output generated from countanalysis() then\n#' categAltrePeaks()\n#' @param viewer whether the plot should be displayed in the RStudio viewer or\n#'        in Shiny/Knittr\n#' @param palette RColorBrewer palette to change graph colors\n\n#'\n#' @return a highcharter object\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks,\n#' minreps = 2)\n#' TSSannot <- getTSS()\n#' consensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n#' TSS = TSSannot,\n#' merge = TRUE,\n#' regionspecific = TRUE,\n#' distancefromTSSdist = 1500,\n#' distancefromTSSprox = 1000)\n#' consensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n#'                                  sampleinfo = csvfile,\n#'                                  reference = 'SAEC',\n#'                                  chrom = 'chr21')\n#' alteredPeaks <- countanalysis(counts = consensusPeaksCounts,\n#' pval = 0.01,\n#' lfcvalue = 1)\n#' alteredPeaksCategorized <- categAltrePeaks(alteredPeaks,\n#'                                           lfctypespecific = 1.5,\n#'                                           lfcshared = 1.2,\n#'                                           pvaltypespecific = 0.01,\n#'                                           pvalshared = 0.05)\n#' plotCountAnalysis2(alteredPeaksCategorized)\n#' }\n#' @export\n\n#\nplotCountAnalysis2 <- function(altrepeakscateg, viewer = TRUE, palette = NULL ) {\n\n    if ( !is.null(palette) ) {\n        cols <- RColorBrewer::brewer.pal(4, palette)\n    } else {cols <- c(\"#C71585\", \"#d3d3d3\", \"#000080\", \"#00E5EE\")}\n                        #grey (ambiguous)\n                        #magenta (experiment-specific)\n                        #blue (reference specific)\n                            #blue (shared)\n\n  log2FoldChange <- NULL\n  padj <- NULL\n  REaltrecateg <- REaltrecategplot <- NULL\n\n  Referencespecificsamples <- altrepeakscateg$reference\n  allsamples <- colnames(altrepeakscateg$analysisresults)[11:12]\n  Experimentspecificsamples <- allsamples[which(!(allsamples %in% Referencespecificsamples))]\n\n  Referencespecific <- paste0(Referencespecificsamples, \"SpecificByIntensity\")\n  Experimentspecific <- paste0(Experimentspecificsamples, \"SpecificByIntensity\")\n\n  Referencespecificlabels <- paste0(Referencespecificsamples, \"-Specific (by intensity)\")\n  Experimentspecificlabels <- paste0(Experimentspecificsamples, \"-Specific (by intensity)\")\n\n  toplot <- altrepeakscateg$analysisresults[ ,c(\"region\",\n                                                \"log2FoldChange\",\n                                                \"padj\",\n                                                \"REaltrecategplot\")]\n  replacement <- sub(Referencespecific, Referencespecificlabels, toplot$REaltrecategplot)\n  replacement <- sub(Experimentspecific, Experimentspecificlabels, replacement)\n  toplot$REaltrecategplot <- replacement\n\n  # Remove NAs:\n  toplot <- toplot[which(!is.na(toplot$padj)),]\n\n  tssdist <- toplot[which(toplot$region == \"TSS-distal\"), ]\n  tssdist$padj <- round(-log10(tssdist$padj), 2)\n  tssdist$log2FoldChange <- round(tssdist$log2FoldChange, 2)\n  tssprox <- toplot[which(toplot$region == \"TSS-proximal\"), ]\n  tssprox$padj <- round(-log10(tssprox$padj), 2)\n  tssprox$log2FoldChange <- round(tssprox$log2FoldChange, 2)\n\n  p1 <- ggplot2::ggplot(tssdist, ggplot2::aes_string('log2FoldChange','padj')) +\n    ggplot2::geom_point(ggplot2::aes(col = factor(tssdist$REaltrecategplot))) +\n    ggplot2::scale_colour_manual(values = cols) +\n    ggplot2::theme_bw(base_size = 15) +\n    ggplot2::theme(legend.title = ggplot2::element_blank()) +\n    ggplot2::scale_x_continuous(expand = c(0, 0)) +\n    ggplot2::scale_y_continuous(expand = c(0, 0)) +\n    ggplot2::theme(panel.grid.major = ggplot2::element_blank(),\n          panel.grid.minor = ggplot2::element_blank()) +\n    ggplot2::labs(x = \"log2FC\", y = \"-log10(pvalue)\") +\n    ggplot2::ggtitle(\"TSS-distal\")\n\n  p2 <- ggplot2::ggplot(tssprox, ggplot2::aes_string('log2FoldChange','padj')) +\n    ggplot2::geom_point(ggplot2::aes(col = factor(tssprox$REaltrecategplot))) +\n    ggplot2::scale_colour_manual(values = cols) +\n    ggplot2::theme_bw(base_size = 15) +\n    ggplot2::theme(legend.title = ggplot2::element_blank()) +\n    ggplot2::scale_x_continuous(expand = c(0, 0)) +\n    ggplot2::scale_y_continuous(expand = c(0, 0)) +\n    ggplot2::theme(panel.grid.major = ggplot2::element_blank(),\n          panel.grid.minor = ggplot2::element_blank()) +\n    ggplot2::labs(x = \"log2FC\", y = \"-log10(pvalue)\") +\n    ggplot2::ggtitle(\"TSS-proximal\")\n\n  return(multiplot(p1,p2))\n}\n\n",
    "created" : 1473944747236.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3563489004",
    "id" : "F92D2FDC",
    "lastKnownWriteTime" : 1473946138,
    "last_content_update" : 1473946138989,
    "path" : "~/Desktop/ALTRE/R/plottingfunctions.R",
    "project_path" : "R/plottingfunctions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}