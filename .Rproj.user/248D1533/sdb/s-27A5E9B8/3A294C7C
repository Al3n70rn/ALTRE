{
    "collab_server" : "",
    "contents" : "#' Enrichment analysis to identify putative pathways of interest for further\n#' investigation\n#'\n#' Determine which pathways are overrepresented in\n#' altered TSS-proximal and TSS-distal regions. Pathways are determined by linking\n#' the TSS-proximal/distal regions to the nearest gene, and then linking genes to pathways\n#' using the gene ontology database. The 'gene' argument limits how few genes\n#' a pathway can contain, while the 'offspring' argument limits how many\n#' offspring a pathway can contain. Pathways with low gene counts are less\n#' reliable (often false positives), while pathways with many offspring are\n#' vague and unlikely to be of much use -- the enrichment of their more precise\n#'  offspring is the more interesting question.\n#'\n#' ************CHANGE ANALYSISRESULTS TO ALTREPEAKS!!!!******************\n#' ****************CHANGE REGIONSUBSET TO REGIONTYPE!!!!*****************\n#' @param analysisresults Results from analysis of counts, categaltre_peaks.\n#' @param ontoltype One of three categories: 'MF' (molecular function),\n#'  'CC' (cellular component), 'BP' (biological process).\n#' @param enrichpvalfilt Adjusted pval for enrichment to filter on\n#'  (adjusted for multiple testing).\n#' @param lfctypespecific Log2fold change (of chromatin accessibility)\n#' for type specific TSS-proximal and TSS-distal regions.\n#' @param lfcshared Log2fold change (of chromatin accessibility) for\n#'  shared TSS-proximal and TSS-distal regions.\n#' @param pvaltypespecific P-value (of chromatin accessibility) for\n#'  type specific TSS-proximal and TSS-distal regions.\n#' @param pvalshared P-value (of chromatin accessibility) for\n#' shared TSS-proximal and TSS-distal regions.\n#' @param genes Minimum number of genes allowable in a pathway.\n#' @param offspring Maximum number of offspring allowable in a pathway.\n#' @param regionsubset  'TSS-proximal' or 'TSS-distal'. Default is \"TSS-distal\".\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks, minreps = 2)\n#' TSSannot <- getTSS()\n#' consensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n#'    TSS = TSSannot,\n#'    merge = TRUE,\n#'    regionspecific = TRUE,\n#'    distancefromTSSdist = 1500,\n#'    distancefromTSSprox = 1000)\n#' consensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n#'    sampleinfo = csvfile,\n#'    reference = 'SAEC',\n#'    chrom = 'chr21')\n#' alteredPeaks <- countanalysis(counts = consensusPeaksCounts,\n#'    pval = 0.01,\n#'    lfcvalue = 1)\n#' alteredPeaksCategorized <- categAltrePeaks(alteredPeaks,\n#'    lfctypespecific = 1.5,\n#'    lfcshared = 1.2,\n#'    pvaltypespecific = 0.01,\n#'    pvalshared = 0.05)\n#' comparePeaksAnalysisResults <- comparePeaksAltre(alteredPeaksCategorized, reference = \"SAEC\")\n#' MFenrich <- pathenrich(analysisresults = alteredPeaksCategorized,\n#'    ontoltype = 'MF',\n#'    enrichpvalfilt = 0.99)}\n#' @return dataframe identifying p-values for enriched pathways --\n#' pathways also annotated with additional information\n#'\n#'\n#' @export\n\npathenrich <- function(analysisresults,\n                       ontoltype = \"MF\",\n                       enrichpvalfilt = 0.01,\n                       lfctypespecific = 1.5,\n                       lfcshared = 1.2,\n                       pvaltypespecific = 0.01,\n                       pvalshared = 0.05,\n                       genes = 20,\n                       offspring = 300,\n                       regionsubset = \"TSS-distal\") {\n\n  analysisresults <- analysisresults$analysisresults\n\n  if (is.data.frame(analysisresults) == FALSE) {\n    stop(\"analysisresults parameter is not in the correct format,\n         make sure you are using the output from countanalysis()\")\n  }\n#  analysisresultsdata <- as.data.frame(analysisresults)\n\n\n  if (regionsubset == \"all\") {\n    newanalysisresults <- analysisresults\n  } else {\n    newanalysisresults <- analysisresults[analysisresults$region ==\n                                                regionsubset, ]\n  }\n\n  # Define regions that are more open, less\n  # open, or shared\n#  up <- newanalysisresults[!(is.na(newanalysisresults$padj)) &\n#                             newanalysisresults$log2FoldChange >\n#                             lfctypespecific &\n#                             newanalysisresults$padj < pvaltypespecific,]\n#  down <- newanalysisresults[!(is.na(newanalysisresults$padj)) &\n#                               newanalysisresults$log2FoldChange <\n#                               -lfctypespecific &\n#                               newanalysisresults$padj < pvaltypespecific, ]\n#  shared <- newanalysisresults[(newanalysisresults$log2FoldChange <=\n#                                  lfcshared &\n#                                newanalysisresults$log2FoldChange >=\n#                                  -lfcshared) &\n#                                (newanalysisresults$padj >= pvalshared |\n#                                    is.na(newanalysisresults$padj)), ]\n  up <- newanalysisresults[which(newanalysisresults$REaltrecateg ==\n                                   \"Experiment Specific\"), ]\n  down <- newanalysisresults[which(newanalysisresults$REaltrecateg ==\n                                     \"Reference Specific\"), ]\n  shared <- newanalysisresults[which(newanalysisresults$REaltrecateg ==\n                                       \"Shared\"), ]\n  all <- rbind(up, down, shared)\n  subsets <- list(up, down, shared, newanalysisresults)\n  names(subsets) <- c(\"up\", \"down\", \"shared\", \"all\")\n\n  message(\"finding expt-specific...\")\n  if (nrow(subsets[[\"up\"]]) == 0) {\n    expt <- as.data.frame(\"No REs higher in experiment group\")\n  } else {\n    expt <- rundose(set = subsets[[\"up\"]],\n                    background = subsets[[\"all\"]],\n                    log2FoldChange = lfctypespecific,\n                    ontoltype = ontoltype,\n                    pvalfilt = enrichpvalfilt,\n                    genes = genes,\n                    offspring = offspring)\n    if (nrow(shared) == 0) {\n      expt <- as.data.frame(\"No enrichment found for experiment REs\")\n    }\n  }\n\n  message(\"finding reference-specific...\")\n  if (nrow(subsets[[\"down\"]]) == 0) {\n    reference <- as.data.frame(\"No REs higher in reference group\")\n  } else {\n    reference <- rundose(set = subsets[[\"down\"]],\n                         background = subsets[[\"all\"]],\n                         log2FoldChange = lfctypespecific,\n                         ontoltype = ontoltype,\n                         pvalfilt = enrichpvalfilt,\n                         genes = genes,\n                         offspring = offspring)\n    if (nrow(reference) == 0) {\n      reference <- as.data.frame(\"No enrichment found for reference REs\")\n    }\n  }\n\n  message(\"finding shared...\")\n  if (nrow(subsets[[\"shared\"]]) == 0) {\n    shared <- as.data.frame(\"No shared REs\")\n  } else {\n    shared <- rundose(set = subsets[[\"shared\"]],\n                      background = subsets[[\"all\"]],\n                      log2FoldChange = lfcshared,\n                      ontoltype = ontoltype,\n                      pvalfilt = enrichpvalfilt,\n                      genes = genes,\n                      offspring = offspring)\n    print(paste(\"Number of rows:\", nrow(shared)))\n    if (nrow(shared) == 0) {\n      shared <- as.data.frame(\"No enrichment found for shared REs\")\n    }\n  }\n\n  # enrichstats=data.frame(\n\n  allthree <- list(expt = as.data.frame(expt),\n                   reference = as.data.frame(reference),\n                   shared = as.data.frame(shared))\n\n  return(allthree)\n}\n",
    "created" : 1472659431444.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3113587201",
    "id" : "3A294C7C",
    "lastKnownWriteTime" : 1472654988,
    "last_content_update" : 1472654988,
    "path" : "~/Desktop/ALTRE/R/8_getpathways.R",
    "project_path" : "R/8_getpathways.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}