list(y = 30, name = "referencename", dataLabels = FALSE),
list(y = 200, name = "Shared", dataLabels = FALSE)
), name = "number") %>%
hc_exporting(enabled = TRUE)
return(p)
}
plotCompareMethods()
plotCompareMethods <- function(analysisresultsmatrix,
region = "both", method = "Intensity", palette = NULL) {
if ( !is.null(palette) ) {
cols <- RColorBrewer::brewer.pal(3, palette) }
else{cols <- c("#00E5EE", "#C71585","#000080")}
if (region == "TSS-proximal") {
feature <- c("TSS-proxs")
coordinates <- c(2, 5, 8)
}
if (region == "TSS-distal") {
feature <- c("TSS-dists")
coordinates <- c(1, 4, 7)
}
if (region == "both") {
region <- c("All")
feature <- c("TSS-dists", "TSS-proxs")
coordinates <- c(3, 6, 9)
}
# identifies the correct numbers from the
# analysisresults matrix based on the
# regulatory region of interest
if (method == "Intensity") {
case <- analysisresultsmatrix[coordinates[1], 1]
reference <- analysisresultsmatrix[coordinates[2], 1]
shared <- analysisresultsmatrix[coordinates[3], 1]
}
if (method == "Peak") {
case <- analysisresultsmatrix[coordinates[1], 2]
reference <- analysisresultsmatrix[coordinates[2], 2]
shared <- analysisresultsmatrix[coordinates[3], 2]
}
# identifies the correct numbers from the
# analysisresults matrix based on the
# method of region
string <- paste(rownames(analysisresultsmatrix)[1],
rownames(analysisresultsmatrix)[2],
rownames(analysisresultsmatrix)[3],
rownames(analysisresultsmatrix)[4],
rownames(analysisresultsmatrix)[5],
rownames(analysisresultsmatrix)[6],
rownames(analysisresultsmatrix)[7],
rownames(analysisresultsmatrix)[8],
rownames(analysisresultsmatrix)[9])
stringsplit <- strsplit(string, " ")
uniquestringsplit <- unique(stringsplit[[1]])
split <- unlist(strsplit(rownames(analysisresultsmatrix)[1], split = " "))
names <- split[!(split %in% c("TSS-dists"))]
names <- paste(names, collapse = " ")
casename <- names
split <- unlist(strsplit(rownames(analysisresultsmatrix)[4], split = " "))
names <- split[!(split %in% c("TSS-dists"))]
names <- paste(names, collapse = " ")
referencename <- names
# this is a way to the name of the 'case'
# from the analysisresults matrix
p <- highchart(height = 700) %>%
hc_chart(type = "pie") %>%
hc_title(text = paste(region, method),
style = list(color = '#2E1717',
fontWeight = 'bold')) %>%
hc_plotOptions(
series = list(showInLegend = TRUE)
) %>%
hc_legend(
enabled = TRUE,
layout = "horizontal",
align = "center",
verticalAlign = "bottom",
floating = FALSE,
maxHeight = 100,
x = 0,
y = 16
) %>%
hc_add_series(data = list(
list(y = case, name = casename, dataLabels = FALSE),
list(y = reference, name = referencename, dataLabels = FALSE),
list(y = shared, name = "Shared", dataLabels = FALSE)
), name = paste(region, method)) %>%
hc_colors(cols)  %>%
hc_exporting(enabled = TRUE)
return(p)
}
plotCompareMethodsAll(comparePeaksAnalysisResults)
plotDistCountAnalysis <- function(analysisresults, counts, palette = NULL){
if ( !is.null(palette) ) {
cols <- RColorBrewer::brewer.pal(4, palette) }
else{cols <- c("#C71585", "#d3d3d3", "#000080", "#00E5EE")}
#magenta (experiment-specific) #grey (ambiguous) #blue (shared))
#blue (reference specific)
readcounts <- counts$regioncounts
analysisresults <- analysisresults[[1]]
errortest = try(SummarizedExperiment::assay(readcounts), silent = TRUE)
if (inherits(errortest, 'try-error') == TRUE) {
stop("The input for the readcounts arguement is
not a summerized experiment object!")
}
if (is.data.frame(analysisresults) == FALSE)
{
stop("The input for the analysisresults arguement is not a dataframe!")
}
# Check that counts and analysisresults are in the same order
countsinfo <- as.data.frame(SummarizedExperiment::rowRanges(readcounts))
countcoord <- paste0(countsinfo$seqnames, countsinfo$start, countsinfo$end)
analcoord <- paste0(analysisresults$chr,
analysisresults$start,
analysisresults$stop)
if (!all.equal(analcoord, countcoord)) {
stop("The peaks in the analysisresults and counts are not the same")
}
PEcateg <- analysisresults$region
altrecateg <- analysisresults$REaltrecateg
# Get log2FPM values:
log2FPM <- log2(DESeq2::fpkm(readcounts, robust = TRUE) + 0.001)
# Average log2FPM values over replicats:
sampletypes <- SummarizedExperiment::colData(readcounts)$sample
meanlog2FPM <- c()
for (i in unique(sampletypes)) {
samp <- which(sampletypes == i)
meanlog2FPM <- cbind(meanlog2FPM,
as.numeric(apply(log2FPM[, samp], 1, mean)))
}
colnames(meanlog2FPM) <- unique(sampletypes)
mydf <- data.frame(meanlog2FPM = meanlog2FPM,
PEcateg = PEcateg,
altrecateg = altrecateg)
TSSdistal <- dplyr::filter(mydf, PEcateg == "TSS-distal")
distal1 <- dplyr::filter(mydf, altrecateg == "Experiment Specific")
distal2 <- dplyr::filter(mydf, altrecateg == "Ambiguous")
distal3 <- dplyr::filter(mydf, altrecateg == "Shared")
distal4 <- dplyr::filter(mydf, altrecateg == "Reference Specific")
TSSproximal <- dplyr::filter(mydf, PEcateg == "TSS-proximal")
proximal1 <- dplyr::filter(mydf, altrecateg == "Experiment Specific")
proximal2 <- dplyr::filter(mydf, altrecateg == "Ambiguous")
proximal3 <- dplyr::filter(mydf, altrecateg == "Shared")
proximal4 <- dplyr::filter(mydf, altrecateg == "Reference Specific")
distal1_5num_A549 <- stats::fivenum(distal1$meanlog2FPM.A549)
proximal1_5num_A549 <- stats::fivenum(proximal1$meanlog2FPM.A549)
distal1_5num_SAEC <- stats::fivenum(distal1$meanlog2FPM.SAEC)
proximal1_5num_SAEC <- stats::fivenum(proximal1$meanlog2FPM.SAEC)
distal2_5num_A549 <- stats::fivenum(distal2$meanlog2FPM.A549)
proximal2_5num_A549 <- stats::fivenum(proximal2$meanlog2FPM.A549)
distal2_5num_SAEC <- stats::fivenum(distal2$meanlog2FPM.SAEC)
proximal2_5num_SAEC <- stats::fivenum(proximal2$meanlog2FPM.SAEC)
distal3_5num_A549 <- stats::fivenum(distal3$meanlog2FPM.A549)
proximal3_5num_A549 <- stats::fivenum(proximal3$meanlog2FPM.A549)
distal3_5num_SAEC <- stats::fivenum(distal3$meanlog2FPM.SAEC)
proximal3_5num_SAEC <- stats::fivenum(proximal3$meanlog2FPM.SAEC)
distal4_5num_A549 <- stats::fivenum(distal4$meanlog2FPM.A549)
proximal4_5num_A549 <- stats::fivenum(proximal4$meanlog2FPM.A549)
distal4_5num_SAEC <- stats::fivenum(distal4$meanlog2FPM.SAEC)
proximal4_5num_SAEC <- stats::fivenum(proximal4$meanlog2FPM.SAEC)
Experimentspecific_list <- list(round(distal1_5num_A549,3),
round(proximal1_5num_A549, 3),
round(distal1_5num_SAEC,3),
round(proximal1_5num_SAEC,3))
Ambiguous_list <- list(round(distal2_5num_A549,3),
round(proximal2_5num_A549,3),
round(distal2_5num_SAEC,3),
round(proximal2_5num_SAEC,3))
Shared_list <- list(round(distal3_5num_A549,3),
round(proximal3_5num_A549,3),
round(distal3_5num_SAEC,3),
round(proximal3_5num_SAEC,3))
Referencespecific_list <- list(round(distal4_5num_A549,3),
round(proximal4_5num_A549,3),
round(distal4_5num_SAEC,3),
round(proximal4_5num_SAEC,3))
categ <- c('A549-specific TSS-distal', 'A549-specific TSS-proximal',
'SAEC-specific TSS-distal', 'SAEC-specific TSS-proximal')
p <- highchart() %>%
hc_title(text = "Distribution of Normalized Counts",
style = list(color = '#2E1717',
fontWeight = 'bold')) %>%
hc_plotOptions(
boxplot = list(
fillColor = '#ffffff',
lineWidth = 2,
medianColor = '#000000',
medianWidth = 2,
stemColor = '#000000',
stemDashStyle = 'dot',
stemWidth = 1,
whiskerColor = '#000000',
whiskerLength = '20%',
whiskerWidth = 3
)
) %>%
hc_add_series(data = Experimentspecific_list,
name = 'Experiment Specific',
type = "boxplot") %>%
hc_add_series(data = Ambiguous_list,
name = 'Ambiguous',
type = "boxplot") %>%
hc_add_series(data = Shared_list,
name = 'Shared',
type = "boxplot") %>%
hc_add_series(data = Referencespecific_list,
name = 'Reference Specific',
type = "boxplot") %>%
hc_yAxis(title = list(text = "Observations"),
labels = list(format = "{value}")) %>%
hc_xAxis(categories = categ, title = "Experiment No.") %>%
hc_tooltip(headerFormat = "<b>{point.key}</b><br>",
pointFormat = "{point.y}") %>%
hc_colors(cols) %>%
hc_exporting(enabled = TRUE)
return(p)
}
plotDistCountAnalysis(alteredPeaksCategorized, consensusPeaksCounts)
plotCombineAnnotatePeaks <- function(conspeaks, viewer = TRUE,
palette = "Set1") {
cols <- RColorBrewer::brewer.pal(3, palette)
CellType <- NULL
#R CMD check throws no visible binding for global variable error
mergeStats <- conspeaks$mergestats
row.names(mergeStats) <- NULL
mergeStats[ , 2] <-  as.numeric(as.character(mergeStats[[2]]))
mergeStats[ , 3] <-  as.numeric(as.character(mergeStats[[3]]))
mergeStatsFormatted <- tidyr::gather(mergeStats, "CellType", "Count", 2:3)
if ( nrow(mergeStatsFormatted) == 1 ) {
stop("No plot to show since merging was not performed
when calling combineAnnotatePeaks function")
}
feature <- "TotalNumber"
if ( feature == "TotalNumber") {
mergeStatsTotal <- dplyr::filter(mergeStatsFormatted,
CellType == "TotalNumber")
thecondition <- matrix(unlist(strsplit(mergeStatsTotal$Condition, "_")),
nrow = 3, ncol = 4)[2,]
mergeStatsBefore <- dplyr::filter(mergeStatsTotal,
thecondition == "before")
mergeStatsAfter <- dplyr::filter(mergeStatsTotal,
thecondition == "after")
p1 <- highchart(height = 1000) %>%
hc_title(text = "Number of REs before/after merging",
style = list(color = '#2E1717',
fontWeight = 'bold')) %>%
hc_add_series(
data = mergeStatsBefore$Count,
name = c("TSS-distal"),
type = "column",
dataLabels = list(
enabled = TRUE,
rotation = 270,
color = '#FFFFFF',
y = 40
)) %>%
hc_add_series(
data = mergeStatsAfter$Count,
name = c("TSS-proximal"),
type = "column",
dataLabels = list(
enabled = TRUE,
rotation = 270,
color = '#FFFFFF',
y = 40
)) %>%
hc_yAxis(title = list(text = "Number of REs"),
labels = list(format = "{value}")) %>%
hc_xAxis(categories = c("Before Merging", "After Merging")) %>%
hc_legend(
enabled = TRUE,
layout = "horizontal",
align = "center",
verticalAlign = "bottom",
floating = FALSE,
maxHeight = 100,
x = 0,
y = 17
) %>%
hc_tooltip(
headerFormat = "<b>{series.name}_{point.key}</b><br>",
pointFormat = "{point.y}",
valueSuffix = ' peaks'
) %>%
hc_colors(cols) %>%
hc_exporting(enabled = TRUE)
}
feature <- "MeanLength"
if ( feature == "MeanLength" ) {
mergeStatsMean <- dplyr::filter(mergeStatsFormatted,
CellType == "MeanLength")
thecondition <- matrix(unlist(strsplit(mergeStatsMean$Condition, "_")),
nrow = 3,
ncol = 4)[2, ]
mergeStatsBefore <- dplyr::filter(mergeStatsMean,
thecondition == "before")
mergeStatsAfter <- dplyr::filter(mergeStatsMean,
thecondition == "after")
p2 <- highchart(height = 1000) %>%
hc_title(text = "Mean length of REs before/after merging",
style = list(color = '#2E1717',
fontWeight = 'bold')) %>%
hc_add_series(
data = mergeStatsBefore$Count,
name = c("TSS-distal"),
type = "column",
dataLabels = list(
enabled = TRUE,
rotation = 270,
color = '#FFFFFF',
y = 40
)) %>%
hc_add_series(
data = mergeStatsAfter$Count,
name = c("TSS-proximal"),
type = "column",
dataLabels = list(
enabled = TRUE,
rotation = 270,
color = '#FFFFFF',
y = 40
)) %>%
hc_yAxis(title = list(text = "Mean Length of REs"),
labels = list(format = "{value}")) %>%
hc_xAxis(categories = c("Before Merging", "After Merging")) %>%
hc_legend(
enabled = TRUE,
layout = "horizontal",
align = "center",
verticalAlign = "bottom",
floating = FALSE,
maxHeight = 100,
x = 0,
y = 17
) %>%
hc_tooltip(
headerFormat = "<b>{series.name}_{point.key}</b><br>",
pointFormat = "{point.y}",
valueSuffix = ' peaks'
) %>%
hc_colors(cols) %>%
hc_exporting(enabled = TRUE)
}
if (viewer == TRUE) {
p <- htmltools::browsable(hw_grid(p1, p2, ncol = 2, rowheight = 550))
}
else {
p <- hw_grid(p1, p2)
}
return(p)
}
plotCombineAnnotatePeaks(consensusPeaksAnnotated)
plotCombineAnnotatePeaks <- function(conspeaks, viewer = TRUE,
palette = "Set1") {
cols <- RColorBrewer::brewer.pal(3, palette)
CellType <- NULL
#R CMD check throws no visible binding for global variable error
mergeStats <- conspeaks$mergestats
row.names(mergeStats) <- NULL
mergeStats[ , 2] <-  as.numeric(as.character(mergeStats[[2]]))
mergeStats[ , 3] <-  as.numeric(as.character(mergeStats[[3]]))
mergeStatsFormatted <- tidyr::gather(mergeStats, "CellType", "Count", 2:3)
if ( nrow(mergeStatsFormatted) == 1 ) {
stop("No plot to show since merging was not performed
when calling combineAnnotatePeaks function")
}
feature <- "TotalNumber"
if ( feature == "TotalNumber") {
mergeStatsTotal <- dplyr::filter(mergeStatsFormatted,
CellType == "TotalNumber")
thecondition <- matrix(unlist(strsplit(mergeStatsTotal$Condition, "_")),
nrow = 3, ncol = 4)[2,]
mergeStatsBefore <- dplyr::filter(mergeStatsTotal,
thecondition == "before")
mergeStatsAfter <- dplyr::filter(mergeStatsTotal,
thecondition == "after")
p1 <- highchart(height = 1000) %>%
hc_title(text = "Number of REs",
style = list(color = '#2E1717',
fontWeight = 'bold')) %>%
hc_add_series(
data = mergeStatsBefore$Count,
name = c("TSS-distal"),
type = "column",
dataLabels = list(
enabled = TRUE,
rotation = 270,
color = '#FFFFFF',
y = 40
)) %>%
hc_add_series(
data = mergeStatsAfter$Count,
name = c("TSS-proximal"),
type = "column",
dataLabels = list(
enabled = TRUE,
rotation = 270,
color = '#FFFFFF',
y = 40
)) %>%
hc_yAxis(title = list(text = "Number of REs"),
labels = list(format = "{value}")) %>%
hc_xAxis(categories = c("Before Merging", "After Merging")) %>%
hc_legend(
enabled = TRUE,
layout = "horizontal",
align = "center",
verticalAlign = "bottom",
floating = FALSE,
maxHeight = 100,
x = 0,
y = 17
) %>%
hc_tooltip(
headerFormat = "<b>{series.name}_{point.key}</b><br>",
pointFormat = "{point.y}",
valueSuffix = ' peaks'
) %>%
hc_colors(cols) %>%
hc_exporting(enabled = TRUE)
}
feature <- "MeanLength"
if ( feature == "MeanLength" ) {
mergeStatsMean <- dplyr::filter(mergeStatsFormatted,
CellType == "MeanLength")
thecondition <- matrix(unlist(strsplit(mergeStatsMean$Condition, "_")),
nrow = 3,
ncol = 4)[2, ]
mergeStatsBefore <- dplyr::filter(mergeStatsMean,
thecondition == "before")
mergeStatsAfter <- dplyr::filter(mergeStatsMean,
thecondition == "after")
p2 <- highchart(height = 1000) %>%
hc_title(text = "Mean length of REs",
style = list(color = '#2E1717',
fontWeight = 'bold')) %>%
hc_add_series(
data = mergeStatsBefore$Count,
name = c("TSS-distal"),
type = "column",
dataLabels = list(
enabled = TRUE,
rotation = 270,
color = '#FFFFFF',
y = 40
)) %>%
hc_add_series(
data = mergeStatsAfter$Count,
name = c("TSS-proximal"),
type = "column",
dataLabels = list(
enabled = TRUE,
rotation = 270,
color = '#FFFFFF',
y = 40
)) %>%
hc_yAxis(title = list(text = "Mean Length of REs"),
labels = list(format = "{value}")) %>%
hc_xAxis(categories = c("Before Merging", "After Merging")) %>%
hc_legend(
enabled = TRUE,
layout = "horizontal",
align = "center",
verticalAlign = "bottom",
floating = FALSE,
maxHeight = 100,
x = 0,
y = 17
) %>%
hc_tooltip(
headerFormat = "<b>{series.name}_{point.key}</b><br>",
pointFormat = "{point.y}",
valueSuffix = ' peaks'
) %>%
hc_colors(cols) %>%
hc_exporting(enabled = TRUE)
}
if (viewer == TRUE) {
p <- htmltools::browsable(hw_grid(p1, p2, ncol = 2, rowheight = 550))
}
else {
p <- hw_grid(p1, p2)
}
return(p)
}
plotCombineAnnotatePeaks(consensusPeaksAnnotated)
countsConsPeaks=consensusPeaksCounts
region <- NULL
variable <- NULL
#set to null forR CMD Check error: Undefined global functions/variables
cols <- RColorBrewer::brewer.pal(4, palette)
palette = "Set1"
cols <- RColorBrewer::brewer.pal(4, palette)
mydf <- countsConsPeaks$regioncountsforplot
varstack <- suppressMessages(reshape2::melt(mydf))
varstack
head(varstack)
mydf
head(mydf)
head(varstack)
tidyr::gather(mydf, A549, SAEC)
head(tidyr::gather(mydf, A549, SAEC))
head(mydf)
head(varstack)
varstack
head(varstack)
?melt
mydf
head(mydf)
head(varstack)
document()
setwd("/Users/bask05/Desktop/ALTRE")
document()
View(mydf)
