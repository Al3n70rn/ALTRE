{
    "collab_server" : "",
    "contents" : "---\ntitle: 'ALTRE: vignette'\nauthor: \"Ewy Mathe, Elizabeth Baskin, and Rick Farouni\"\ndate: '`r Sys.Date()`'\noutput: html_document\nvignette: >\n  %\\VignetteIndexEntry{ALTRE: vignette} \n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n\n#Introduction\n\nALTRE (ALTered Regulatory Elements) is an R software package that streamlines and simplifies the analysis of data generated from genome-wide chromatin accessibility assays such as DNase-seq (a.k.a. DHS-seq), FAIRE-seq, and ATAC-seq.\n\nRegulatory elements (REs) such as enhancers and promoters are involved in regulating gene transcription – they control genes and pathways that can be investigated as putative therapeutic targets, or they may serve as targets themselves. Chromatin accessibility assays allow us to identify the location of REs genome-wide by identifying “open” chromatin (i.e. euchromatin). Identifying REs that differ between cell types, such as cancerous and noncancerous cell lines and tissues, holds promise for discovering new mechanisms involved in cellular development and disease progression. \n\n#Workflow\n\nALTRE takes as input a CSV file which provides the names and metadata information for the alignment files (BAM format) and peak files (BED format) of samples to be analyzed.  The software then takes users through defining altered peaks using both binary data (presence/absence of peaks) and quantitative data (peak intensity). Moreover, the package includes functions that merge and annotate peaks (e.g. as promoters and enhancers), perform enrichment analysis for REs of interest, and provide visualization functions. The analysis can be conducted through the R command line or through an RShiny web interface for those who are not familiar with the R statistical language. This vignette further explains the purpose of the package and establishes the workflow.\n\n###Graphing analysis results\n\nResults of this analysis will be displayed in a number of graphs throughout the workflow. These graphs are interactive -- mouse-over data points to find further information, such as the exact coordinates (e.g. p-value) of a plotted sample, or click a sample or condition in the legend to hide it from the graph -- this can allow the remaining samples to be compared more easily as the graph will zoom in and out to accommodate changes.\n\n###Example data \n\nTo demonstrate the functionality of ALTRE, we have provided an example dataset (BAM and BED files) of cancerous (A549) and normal (SAEC) lung cell types downloaded from the ENCODE project (see <https://mathelab.github.io/ALTREsampledata/>). Of note, this vignette uses only a subset of the data corresponding to Chromosome 21 (results may not be as meaningful). \n\n**1. Load Data** \n\n*Load Metadata*\nThe metadata associated with data files to be analyzed in ALTRE is supplied as a CSV file. The software will automatically retrieve the file path of your input CSV so __it is important that all analysis files are in the same folder as your CSV file.__  \n\nAfter downlading all files in the example datasets in one folder, download the CSV at <https://raw.githubusercontent.com/mathelab/AltreDataRepo/master/DNaseEncodeExample.csv> and place it in the same folder.  Also, be sure to set your working directory in the R environment to point to the directory where you have placed your CSV file.\n\n```{r}\nlibrary(ALTRE)\ncsvfile <- loadCSVFile(\"DNaseEncodeExample.csv\")\ncsvfile\n```\n\n*Load peak files*\nRead in the peak files (BED format) with the *loadBedFiles()* function.  Only the first three columns (chr, start, end) of the peak files are required an read in. Additional columns are allowed but ignored.\n\n```{r, message=FALSE}\nsamplePeaks <- loadBedFiles(csvfile)\nsamplePeaks\n```\n\n**2. Get Reproducible Peaks**\n\nIn the second step, ALTRE identifies consensus peaks among sample replicates – peaks that are present in all (or, less stringently, the majority) of sample replicates. The function *getConsensusPeaks()* processes an input of two or more peak files per sample and returns a GRanges list. At least two biological replicates are required in order to identify consensus peaks.\n\n```{r}\nconsensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks,\n                                    minreps = 2)\n```\n\nThe function *plotConsensusPeaks()* creates a bar graph comparing the number of replicate peaks identified vs. total number of peaks.\n\n```{r}\nplotConsensusPeaks(samplepeaks = consensusPeaks)\n```\n\n**3. Annotate Peaks**\n\nThe output of the function *getConsensusPeaks()* is then further processed by the *combineAnnotatePeaks()* function, which in turn accomplishes three main tasks:\n\n  1. Combines consensus peaks for each samples type into one large master list of peaks for each sample type. \n\n  2. Categorizes peaks as candidate promoters or enhancers, based on the distance of the peaks from a transcription start site (TSS). In this vignette we will use the default promoter distance argument: peaks within 1,500 bp of a TSS are considered promoters; those not within 1,500 bp of a TSS are considered enhancers.\n\n  3. Optionally, merges peaks within a certain distance of each other. Merging close-by peaks loosens the stringency of the region comparison. Multiple regions of active chromatin within ~1000 bp are likely to represent only one regulatory element. In this vignette we will use the defaults of the function, which merges regions within 1000 bp of each other and merges only within regulatory element type (i.e. only enhancers will only be merged with other enhancers, and likewise, promoters only with promoters). Both these functionalities can be changed via the “mergedistenh”, “mergedistprom” and “regionspecific” arguments.\n\nThe *combineAnnotatePeaks()* function requires a list of TSSs for the promoter/enhancer annotation, which can be read in with the *getTSS()* function:\n```{r}\nTSSannot <- getTSS()\n```\n\nThen the function can be run with: \n\n```{r}\nconsensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n                                           TSS = TSSannot,\n                                           merge = TRUE,\n                                           regionspecific = TRUE,\n                                           distancefromTSSdist = 1500,\n                                           distancefromTSSprox = 1000)\n```\n\n\nNote that the output of the previous function *getConsensusPeaks()* is fed as input (consensPeaks).\n\nThe output of *combineAnnotatePeaks()* produces a GRanges object containing the annotated, merged peaks – all peaks present in cancerous or normal lung.\n\nAdditionally, the function *plotCombineAnnotatePeaks()* creates a bar graph to showcase the changes in the number and size of enhancers and promoters before and after merging close-by peaks.\n\n```{r}\nplotCombineAnnotatePeaks(consensusPeaksAnnotated)\n```\n\nThe number of regulatory elements decreases and the size of the regions increases, as expected.\n\n\n**4. Get Read Counts**\n\nThe next function *getCounts()* retrieves the number of reads in each regulatory element (RE) for each sample type – this determines the peak height/intensity and approximates the accessibility of the RE in question.  Read counts are retrieved from the alignment files (BAM format) that are supplied in the CSV file containing the sample metadata.  We have already read in the CSV in the first step of the workflow (load data).  \n\nOf note, one cell type must be designated as  “reference ”, to which the other cell types will be compared. In this example, the reference type is the normal lung cell line (SAEC).\n\nTo run the function:\n```{r}\nconsensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n                              sampleinfo = csvfile,\n                              reference = 'SAEC',\n                              chrom = 'chr21')\nplotGetCounts(consensusPeaksCounts)\n```\n\n\n**5. Retrieve and Categorize Candidate Altered Regulatory Elements (REs)**\n\nThe counts for each REs are processed by the function *countanalysis()*, which leverages the algorithm from the R package DESeq2 to compare peak intensities across cell types.  \n\n```{r}\nalteredPeaks <- countanalysis(counts = consensusPeaksCounts,\n                             pval = 0.01,\n                             lfcvalue = 1)\n\n```\n\nAltered REs are next categorized based on associated log2fold changes and p-values, where larger log2fold changes and smaller p-values signify greater differences between cell types. How large a change is considered cell-type specific is left up to the user.\n\n```{r}\nalteredPeaksCategorized <- categAltrePeaks(alteredPeaks,\n                                    lfctypespecific = 1.5,\n                                    lfcshared = 1.2,\n                                    pvaltypespecific = 0.01,\n                                    pvalshared = 0.05)\nplotCountAnalysis(alteredPeaksCategorized)\n```\n\nREs with large, positive log2fold changes and small p-values are more open in the lung cancer cell type, and therefore, their activity is associated with the cancer phenotype. REs with large, negative log2fold changes and small p-values are more open in the normal lung cell type, and may therefore be associated with tumor suppressive properties. REs with minimal log2fold change and high p-values are equally open in both cell types, and therefore, their activity is more likely to contribute to the house-keeping functions required in every cell.\n\n\n**6. Summarizing Results** \n\nOnce results have been obtained, there are a number of additional functions in ALTRE to summarize results and raw data in tables and graphs. \n\n  A. Compare two methods for identifying altered REs:\n    1. one based on peak intensity (ALTRE's *countanalysis()* function)\n    2. one based on peak presence or absence as determined by the peak calling algorithm\n\nTo compare resulting altered REs from these two methods, use the function *comparePeaksAltre* as follows:\n\n```{r}\ncomparePeaksAnalysisResults <- comparePeaksAltre(alteredPeaksCategorized)\n```\n\nThe function *plotCompareMethodsAll(()* takes the results from comparePeaksAltre and translates the table into pie charts.\n\n\n```{r}\nplotCompareMethodsAll(comparePeaksAnalysisResults)\n```\n\n  B. The function *plotDistCountAnalysis()* enables users to view the raw count data in regions identified as type-specific or shared. The log2 transformation of reads per kilo-base per million for each RE is plotted. As expected, for REs identified as higher log-fold change than normal, the lung cancer cell line has much higher counts than he normal lung cell line. The opposite is true for the lower log-fold change regions. For RE with little log-fold change between cell types, the counts are similar. This visual depiction confirms the results of countanalysis and enables users to change parameters if needed.\n\n```{r}\nplotCountAnalysis2(alteredPeaksCategorized, consensusPeaksCounts)\n```\n\n\n**8. Get Putative Enrichment Pathways** \n\nFinally, ALTRE performs pathway enrichment analysis, using [rGREAT](https://bioconductor.org/packages/release/bioc/html/rGREAT.html), for cell type-specific or shared REs using the functions *runGREAT()* and *processPathways()*. The GREAT algorithm incorporates proximal and distal binding sites and uses a binomial testing procedure to mitigate false positives.  More information on the algorithm can be found [here](http://bejerano.stanford.edu/great/public/html/). Enriched” pathways are likely to be regulated by the REs linked to the gene cluster (whether type-specific or shared).\n\nIn the web application, Gene Ontology pathway annotations are used by default, and include 1) Molecular Function (MF); 2) Biological Process (BP); 3) Cellular Component (CC)).  GREAT however allows other pathway categories to be analyzed, including \"Pathway Data\", \"Regulatory Motifs\",\"Phenotype Data and Human Disease\", \"Gene Expression\", and \"Gene Families\".  These pathway categories can be passed onto the *runGREAT()* function via the paramter pathway_category.\n\nBy default, the p-values will be adjusted by \"bonferroni\" and significant pathways will have adjusted p-values < 0.05 and an enrichment of at least 2.\n\nNote that this vignette only uses chr21, therefore the pathway analysis results presented may not be biolofically relevant.  \n\n```{r, message = FALSE}\ncallpaths <- suppressMessages(runGREAT(peaks = alteredPeaksCategorized))\npathresults <- processPathways(callpaths, pathway_category = \"GO\",\n\tenrichcutoff = 2, adjpvalcutoff = 0.05)\n```\n\n\nThe function *plotGREATenrich()* creates a heatmap plot of the analysis for all three RE types (Reference-specific, Experiment-specific, and Shared), with the color-coding corresponding to the significance of the pathway – the lighter the blue, the lower the p-value. \n\n```{r}\nplotGREATenrich(pathresults, maintitle = \"GREAT Enrichment Analysis\",\n\tpathwaycateg = \"GO_Molecular_Function\")\n```\n\n**9. Writing output to files**\nTo enable users to write results to files, the following 4 functions are implemented:\n\n1. *writeBedFile()*: writes a BED file in the working directory with the location of REs, color-coded by type-specificity.  The output BED file can be directly loaded in a genome browser. There is no output to the function that can be saved as an object.\n\n```{r, eval = FALSE}\nwriteBedFile(alteredPeaksCategorized, \"altrecategpeaks.bed\")\n```\n\n2. *writeConsensusRE()*: writes a CSV file in the working direcoty with the location of the consensus regulatory elements, along with their annotation (e.g. TSS-proximal/distal, whether the peaks are found in the experiment or reference samples).  The file takes as input the output of the getConsensusPeaks() function and returns no output.  \n\n```{r, eval=FALSE}\nwriteConsensusRE(consensusPeaksAnnotated, \"altreconspeaks.csv\")\n```\n\n3. *writeCompareRE()*: writes a CSV file with the number of peaks called as experiment- or reference-specific and share using qthe quantitative/peak intensity or peak/binary approach. The function takes the output of comparePeaksAltre() as input and returns no output.  \n\n```{r, eval = FALSE}\nwriteCompareRE(comparePeaksAnalysisResults, \"comparealtrepeaks.csv\")\n```\n\n4. *writeGREATpath()*: writes CSV files showing the results of the functions runGREAT() and processPathways(), which it takes as input.  A zipped folder containing 3xP CSV files will be created, where 3 is the type of REs (e.g. Shared, Reference-specific, and Experiment-specific), and P is the number of pathways (e.g. if GO pathway category is used, then P is 3 - Molecular Function, Cellulcar function, Biological Processes).  \n\n```{r, eval = FALSE}\nwriteGREATpath(pathresults, \"EnrichedPathways.zip\")\n```\n\n```{r}\nsessionInfo()\n```\n",
    "created" : 1473857119325.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "26913120",
    "id" : "36778BD3",
    "lastKnownWriteTime" : 1473857820,
    "last_content_update" : 1473857820969,
    "path" : "~/Desktop/Mathelab-ALTREsampledata/vignette.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}