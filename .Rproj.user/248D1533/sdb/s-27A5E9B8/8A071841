{
    "collab_server" : "",
    "contents" : "#' Given a GRangeslist object with peaks for each samples, determine\n#' the consensus peaks (found in at least N replicates, where N is input\n#'  by the user) for each sample type\n#'\n#' @param samplepeaks A GRangesList object comprising one GRanges object (peaks)\n#'  for each sample (output of loadBEDFiles() function)\n\n#' @param minreps minimum number of replicate samples that a peak should be\n#'  contained in to be called as a consensus peak. This cutoff will be\n#'   applied to both samples.\n#'\n#' @return a list comprising:\n#' 1) a GRangeslist with one GRange for each sample type\n#'  which contains consensus peaks\n#' 2) a summary statistic table\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks, minreps = 2)\n#'}\n#' @export\n\n\ngetConsensusPeaks <- function(samplepeaks, minreps) {\n  if (class(samplepeaks) != \"GRangesList\")\n    stop(\"Peaks must be a GRangesList Object\")\n\n  sampnames <- names(samplepeaks)\n  sampletypes <- sort(unique(gsub(\"_.*\", \"\", sampnames)))\n\n  conspeaks <- GRangesList()\n  conspeaks_stats <- list()\n\n  # Chromosomes to keep (used later to remove other chromosomes e.g. chrM)\n  chrom_subset <- paste0('chr', c(1:22,'X','Y'))\n\n  for (mytype in order(sampletypes)) {\n    mytypepeaks <- samplepeaks[grep(sampletypes[mytype], sampnames)]\n\n    # Concatenate all peaks pertaining to the same sample type and merge\n    # peaks\n    allregregions <- c(mytypepeaks[[1]])\n    for (i in 2:length(mytypepeaks)) {\n      allregregions <- c(allregregions, mytypepeaks[[i]])\n    }\n    reducedallregregions <- reduce(allregregions)\n\n    # For each reduced peak, determine whether it was present in each\n    # sample type\n    for (i in 1:length(mytypepeaks)) {\n      typespecific <- findOverlaps(reducedallregregions, mytypepeaks[[i]])\n      newdataframe <- data.frame(i = matrix(nrow = length(reducedallregregions)))\n      newdataframe[queryHits(typespecific), 1] <- \"present\"\n      values(reducedallregregions) <- cbind(values(reducedallregregions),\n                                            newdataframe)\n    }\n    colnames(values(reducedallregregions)) <- names(mytypepeaks)\n\n    # Find regions that are present in at least N replicates (from user in\n    # put minreps)\n    reducedallregionsdata <- grangestodataframe(reducedallregregions)\n    applymatrix <- as.matrix(reducedallregionsdata[4:ncol(reducedallregionsdata)])\n    keepers <- which(apply(applymatrix,\n                           1,\n                           function(x) length(which(x == \"present\")) >= minreps))\n\n    reducedallregionsdatakeepers <- reducedallregionsdata[keepers, ]\n\n    # Convert back to GRanges object\n    finalgranges <- GRanges(reducedallregionsdatakeepers$chr,\n                            IRanges(reducedallregionsdatakeepers$start,\n                                    reducedallregionsdatakeepers$stop))\n    mcols(finalgranges)[1] <- sampletypes[mytype]\n    colnames(mcols(finalgranges)) <- \"sampletype\"\n\n   # Remove chromosomes that are not 1-22/X/Y\n    finalgranges <- GenomeInfoDb::keepSeqlevels(finalgranges, chrom_subset)\n\n    # Construct output\n    conspeaks$mytype <- finalgranges\n    names(conspeaks)[mytype] <- sampletypes[mytype]\n\n    # Get some stats for the peaks (before/after merging)\n    totconspeaks <- NROW(finalgranges)\n    names(totconspeaks) <- sampletypes[mytype]\n    totreppeaks <- c()\n    for (numreps in 1:length(mytypepeaks)) {\n      totreppeaks <- c(totreppeaks, NROW(mytypepeaks[[numreps]]))\n      names(totreppeaks)[numreps] <- names(mytypepeaks)[numreps]\n    }\n    conspeaks_stats[[mytype]] <- c(totconspeaks, totreppeaks)\n    names(conspeaks_stats)[[mytype]] <- sampletypes[mytype]\n  }  # end looping through sampletypes\n\n  maxreps <- max(c(length(conspeaks_stats[[1]]) - 1,\n                   length(conspeaks_stats[[2]]) - 1))\n  samp1 <- conspeaks_stats[[1]]\n  samp2 <- conspeaks_stats[[2]]\n  if (length(samp1) - 1 != maxreps) {\n    samp1 <- c(samp1, rep(0, maxreps - length(samp1) + 1))\n  }\n  if (length(samp2) - 1 != maxreps) {\n    samp2 <- c(samp2, rep(0, maxreps - length(samp2) + 1))\n  }\n\n  dfstats <- as.data.frame(cbind(c(\"ConsensusPeaks\", paste0(\"rep\", 1:maxreps)),\n                                 samp1,\n                                 samp2))\n  colnames(dfstats) <- c(\"PeakType\", names(conspeaks_stats))\n\n  return(list(consPeaks = conspeaks, consPeaksStats = data.frame(dfstats)))\n}\n\n",
    "created" : 1472654431042.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "156301429",
    "id" : "8A071841",
    "lastKnownWriteTime" : 1472654667,
    "last_content_update" : 1472654667392,
    "path" : "~/Desktop/ALTRE/R/2_getconsensus.R",
    "project_path" : "R/2_getconsensus.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}