{
    "collab_server" : "",
    "contents" : "#' Generates count data for regulatory regions\n#'\n#' Counts the number of reads in each regulatory region for each sample type --\n#' read count is derived from user-input BAM filex, and regions of interest\n#' are supplied in a Granges object, ideally output of combineannotatepeaks.R.\n#'\n#' @param annotpeaks list output from combineannotatepeaks function\n#' @param sampleinfo dataframe as returned from loadCSVFile() function\n#' @param reference name of sample type to be\n#' considered 'reference' in DESeq2 analysis\n#' @param chrom optional, only chromosome chrom will be evaluated\n#'\n#' @return List containing three items:\n#' (1) DESeqDataSet: contains count information for all replicates of all samples\n#' (2) Matrix: contains number of TSS-distal and TSS-proximal\n#'  before and after filtering (if applicable)\n#' (3) Data frame for creating a density plot (use function plotgetcounts()\n#'\n#'\n#' @examples\n#' \\dontrun{\n#' csvfile <- loadCSVFile(\"DNAseEncodeExample.csv\")\n#' samplePeaks <- loadBedFiles(csvfile)\n#' consensusPeaks <- getConsensusPeaks(samplepeaks = samplePeaks, minreps = 2)\n#' TSSannot <- getTSS()\n#' consensusPeaksAnnotated <- combineAnnotatePeaks(conspeaks = consensusPeaks,\n#'    TSS = TSSannot,\n#'    merge = TRUE,\n#'    regionspecific = TRUE,\n#'    distancefromTSSdist = 1500,\n#'    distancefromTSSprox = 1000)\n#' consensusPeaksCounts <- getCounts(annotpeaks = consensusPeaksAnnotated,\n#'    sampleinfo = csvfile,\n#'    reference = 'SAEC',\n#'    chrom = 'chr21')\n#' }\n#' @export\n\ngetCounts <- function(annotpeaks,\n                      sampleinfo,\n                      reference,\n                      chrom = NULL) {\n\n  bamfileslist <- loadBamFiles(sampleinfo)\n\n  if (is.null(chrom) == FALSE) {\n    inputgranges <- annotpeaks[[1]][seqnames(annotpeaks[[1]]) == chrom,\n                                    ]\n  } else {\n    inputgranges <- annotpeaks[[1]]\n  }\n\n  # Count number of reads overlapping each annotated peak\n  countsse <- GenomicAlignments::summarizeOverlaps(features = inputgranges,\n                                                   reads = bamfileslist,\n                                                   mode = \"Union\",\n                                                   singleEnd = TRUE,\n                                                   ignore.strand = TRUE)\n  # add column labels\n  SummarizedExperiment::colData(countsse) <- DataFrame(sampleinfo[, c(1:4)])\n  countsse$sample <- as.factor(countsse$sample)\n\n  countsse$status <- stats::relevel(countsse$sample, reference)\n  countssedds <- DESeq2::DESeqDataSet(countsse, design = ~status)\n\n  # Optional filtering out of lowcount regions As part of the DESeq2\n  # algorithm, more stringent filtering will be applied subsequently\n  # countssedds[ rowSums(counts(countssedds)) > 1, ]\n\n  # get counts referenceized by librarysize\n  normcountssedds <- SummarizedExperiment::assay(countssedds, norm = T)\n\n  # get region/peak size\n  originaldata <- grangestodataframe(inputgranges)\n  regionsize <- originaldata$stop - originaldata$start\n\n  # Calculate RPKM for plotting densities multiply by 10^6 and divide by\n  # regions size to get rpkm\n  myrpkm <- as.data.frame(normcountssedds[, 1] * 10 ^ 6/regionsize)\n  for (i in 2:ncol(normcountssedds)) {\n    myrpkm[, i] <- normcountssedds[, i] * 10 ^ 6/regionsize\n  }\n  # take the log2 so that it is a normalized distribution\n  myrpkmlog2 <- log2(as.matrix(myrpkm) + 1)\n  colnames(myrpkmlog2) <- unlist(lapply(paste(sampleinfo$sample,\n                                              sampleinfo$replicate,\n                                              sep = \"_\"),\n                                        as.character)\n                                 )\n\n  #########################################\n  # Create stats matrix originaldata is created ~ 10 lines lines above\n  colnames(originaldata) <- unlist(lapply(colnames(originaldata), gsub,\n                                          pattern = \"meta.\", replacement = \"\"))\n  tssdistnum <- length(which(originaldata$region == \"TSS-distal\"))\n  tssproxnum <- length(which(originaldata$region == \"TSS-proximal\"))\n\n  statdf <- data.frame(Num_TSSdistals = tssdistnum,\n                       Num_TSSproximals = tssproxnum)\n\n  #########################################\n  # Create densityplot\n  region <- originaldata$region\n  forplotdf <- cbind(myrpkmlog2, as.data.frame(region))\n\n  colnames(SummarizedExperiment::rowData(countssedds)) <-\n    gsub(\"meta.\",\"\", colnames(SummarizedExperiment::rowData(countssedds)))\n\n\n  return(list(regioncounts = countssedds, regioncountstats = statdf,\n              regioncountsforplot = forplotdf, reference))\n}\n",
    "created" : 1473876597505.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3763500081",
    "id" : "915924C8",
    "lastKnownWriteTime" : 1473866794,
    "last_content_update" : 1473866794,
    "path" : "~/Desktop/ALTRE/R/4_getcounts.R",
    "project_path" : "R/4_getcounts.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}